import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as t,c as o,a as n,e,g as s,f as c,h as l}from"./app.17eb5f9b.js";const i={},u=n("p",null,"\u7ED9\u4F60\u4E00\u4E2A\u5B57\u7B26\u4E32 s\uFF0C\u627E\u5230 s \u4E2D\u6700\u957F\u7684\u56DE\u6587\u5B50\u4E32\u3002",-1),r=n("h2",{id:"\u52A8\u6001\u89C4\u5212\u89E3\u6CD5",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u52A8\u6001\u89C4\u5212\u89E3\u6CD5","aria-hidden":"true"},"#"),s(" \u52A8\u6001\u89C4\u5212\u89E3\u6CD5")],-1),k={href:"https://github.com/SimonFighter/leetcode_lucifer/blob/master/problems/5.longest-palindromic-substring.md",target:"_blank",rel:"noopener noreferrer"},d=s("\u89E3\u6CD5\u539F\u51FA\u5904"),m=c(`<h3 id="\u601D\u8DEF" tabindex="-1"><a class="header-anchor" href="#\u601D\u8DEF" aria-hidden="true">#</a> \u601D\u8DEF</h3><p>\u7528 <code>dp[i][j]</code> \u8868\u793A\u4ECE <code>i-j</code> \u662F\u5426\u80FD\u5F62\u6210\u56DE\u6587\u4E32\u3002</p><p>\u5012\u7740\u904D\u5386\u53EF\u4EE5\u7B80\u5316\u64CD\u4F5C\uFF0C \u8FD9\u4E48\u505A\u7684\u539F\u56E0\u662F <code>dp[i][..]</code> \u4F9D\u8D56\u4E8E <code>dp[i + 1][..]</code>\u3002</p><p>\u5BF9 <code>dp[i][j]</code> \u7684\u503C\u6709\u4E09\u79CD\u60C5\u51B5\u53EF\u4EE5\u4E3A <code>true</code>\uFF1A</p><ul><li><code>j - i === 0</code> \u5F53\u524D\u4F4D\u53EF\u4F5C\u4E3A\u4E00\u4E2A\u5355\u5B57\u7B26\u7684\u56DE\u6587\u4E32\u3002</li><li><code>j - i === 1 &amp;&amp; s[i] === s[j]</code> \u76F8\u90BB\u7684\u4E24\u4E2A\u6570\u76F8\u540C\u65F6\u53EF\u4F5C\u4E3A\u4E00\u4E2A\u53CC\u5B57\u7B26\u7684\u56DE\u6587\u4E32\u3002</li><li><code>s[i] === s[j] &amp;&amp; dp[i+1][j-1]</code> \u66F4\u8FDC\u4F4D\u6570\u65F6\u4E24\u7AEF\u5B57\u7B26\u76F8\u540C\u4E14\u4E24\u7AEF\u5411\u5185\u4E00\u4F4D\u7684\u5B57\u7B26\u4E32\u662F\u4E00\u4E2A\u56DE\u6587\u4E32 <code>dp[i+1][j-1]</code>\u3002</li></ul><h3 id="\u4EE3\u7801" tabindex="-1"><a class="header-anchor" href="#\u4EE3\u7801" aria-hidden="true">#</a> \u4EE3\u7801</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">longestPalindrome</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>s <span class="token operator">||</span> s<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">// \u5012\u7740\u904D\u5386\u7B80\u5316\u64CD\u4F5C\uFF0C \u8FD9\u4E48\u505A\u7684\u539F\u56E0\u662Fdp[i][..]\u4F9D\u8D56\u4E8Edp[i + 1][..]</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> s<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> i <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u540C\u4F4D</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> i <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u524D\u540E\u4E24\u4F4D</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u66F4\u8FDC\u4F4D</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;</span> res<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">longestPalindrome</span><span class="token punctuation">(</span><span class="token string">&quot;babad&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7);function v(b,h){const a=l("ExternalLinkIcon");return t(),o("div",null,[u,r,n("p",null,[n("a",k,[d,e(a)])]),m])}const j=p(i,[["render",v],["__file","5-\u6700\u5927\u56DE\u6587\u4E32.html.vue"]]);export{j as default};
