(window.webpackJsonp=window.webpackJsonp||[]).push([[140],{794:function(t,a,s){"use strict";s.r(a);var n=s(12),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"nuxt-js-为页面提供的特殊配置项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nuxt-js-为页面提供的特殊配置项"}},[t._v("#")]),t._v(" Nuxt.js 为页面提供的特殊配置项：")]),t._v(" "),s("h3",{attrs:{id:"asyncdata"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#asyncdata"}},[t._v("#")]),t._v(" asyncData")]),t._v(" "),s("p",[t._v("数量的风景")]),t._v(" "),s("ol",[s("li",[t._v("在"),s("strong",[t._v("页面组件")]),t._v(" 每次加载前被调用")]),t._v(" "),s("li",[t._v("在该函数中无法通过 "),s("code",[t._v("this")]),t._v(" 获取组件实例")]),t._v(" "),s("li",[t._v("返回一个 "),s("code",[t._v("Promise")]),t._v("，在 "),s("code",[t._v("Promise")]),t._v(" 解析后才会渲染组件")]),t._v(" "),s("li",[s("code",[t._v("asyncData")]),t._v(" 返回的数据会融合组件 "),s("code",[t._v("data")]),t._v(" 方法返回的数据一并返回给当前组件")]),t._v(" "),s("li",[t._v("返回值可以是这些类型："),s("code",[t._v("Promise")]),t._v(", "),s("code",[t._v("对象")]),t._v(", "),s("code",[t._v("二参的回调函数")])])]),t._v(" "),s("h4",{attrs:{id:"参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参数"}},[t._v("#")]),t._v(" 参数")]),t._v(" "),s("ol",[s("li",[t._v("一参是当前页面的上下文对象，"),s("a",{attrs:{href:"https://www.nuxtjs.cn/api/context",target:"_blank",rel:"noopener noreferrer"}},[t._v("见官方文档"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("二参是回调函数，如下")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ƒ")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" data")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"fetch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fetch"}},[t._v("#")]),t._v(" fetch")]),t._v(" "),s("p",[t._v("与 asyncData 方法类似，用于在渲染页面之前获取数据填充应用的状态树（store）。不同的是 fetch 方法不会设置组件的数据。详情请参考 关于 fetch 方法的文档。")]),t._v(" "),s("h3",{attrs:{id:"head"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#head"}},[t._v("#")]),t._v(" head")]),t._v(" "),s("p",[t._v("配置当前页面的 Meta 标签, 详情参考 页面头部配置 API。")]),t._v(" "),s("h3",{attrs:{id:"layout"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#layout"}},[t._v("#")]),t._v(" layout")]),t._v(" "),s("p",[t._v("指定当前页面使用的布局（layouts 根目录下的布局文件）。详情请参考 关于 布局 的文档。")]),t._v(" "),s("h3",{attrs:{id:"loading"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#loading"}},[t._v("#")]),t._v(" loading")]),t._v(" "),s("p",[t._v("如果设置为 false，则阻止页面自动调用 this.$nuxt.$loading.finish()和 this.$nuxt.$loading.start(),您可以手动控制它,请看例子,仅适用于在 nuxt.config.js 中设置 loading 的情况下。请参考 API 配置 loading 文档。")]),t._v(" "),s("h3",{attrs:{id:"transition"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#transition"}},[t._v("#")]),t._v(" transition")]),t._v(" "),s("p",[t._v("指定页面切换的过渡动效, 详情请参考 页面过渡动效。")]),t._v(" "),s("h3",{attrs:{id:"scrolltotop"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scrolltotop"}},[t._v("#")]),t._v(" scrollToTop")]),t._v(" "),s("p",[t._v("布尔值，默认: false。 用于判定渲染页面前是否需要将当前页面滚动至顶部。这个配置用于 嵌套路由的应用场景。")]),t._v(" "),s("h3",{attrs:{id:"validate"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#validate"}},[t._v("#")]),t._v(" validate")]),t._v(" "),s("p",[t._v("校验方法用于校验 动态路由的参数。")]),t._v(" "),s("h3",{attrs:{id:"middleware"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#middleware"}},[t._v("#")]),t._v(" middleware")]),t._v(" "),s("p",[t._v("指定页面的中间件，中间件会在页面渲染之前被调用， 请参考 路由中间件。\n关于页面配置项的详细信息，请参考 页面 API。")]),t._v(" "),s("h3",{attrs:{id:"watchquery"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#watchquery"}},[t._v("#")]),t._v(" watchQuery")]),t._v(" "),s("p",[t._v("监听参数变化")]),t._v(" "),s("p",[t._v("如果定义的字符串发生变化，将调用所有组件方法(asyncData, fetch, validate, layout, ...)。")]),t._v(" "),s("p",[t._v("类型："),s("code",[t._v("<String>[]")])])])}),[],!1,null,null,null);a.default=r.exports}}]);