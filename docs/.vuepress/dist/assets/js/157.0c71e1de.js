(window.webpackJsonp=window.webpackJsonp||[]).push([[157],{811:function(e,t,v){"use strict";v.r(t);var _=v(12),a=Object(_.a)({},(function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h2",{attrs:{id:"全局"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#全局"}},[e._v("#")]),e._v(" 全局")]),e._v(" "),v("ol",[v("li",[v("code",[e._v("Vue.nextTick()")]),e._v(" 在下次"),v("strong",[e._v("dom 更新结束后")]),e._v("执行回调,没有回调函数时返回的是一个 promise 对象")]),e._v(" "),v("li",[v("code",[e._v("Vue.set(target, propertyName/index, value)")]),e._v(" 给响应式对象添加属性")]),e._v(" "),v("li",[v("code",[e._v("Vue.delete(target,propertyName/index)")]),e._v(" 删除一个对象的属性并更新视图")]),e._v(" "),v("li",[v("code",[e._v("Vue.directive(id,{config})")]),e._v(" 全局指令,只穿 id 返回对应的配置")]),e._v(" "),v("li",[v("code",[e._v("Vue.filter(id,{config})")]),e._v(" 过滤器")]),e._v(" "),v("li",[v("code",[e._v("Vue.component(id,{config})")]),e._v(" 组件")]),e._v(" "),v("li",[v("code",[e._v("Vue.use(plugin)")]),e._v(" 使用插件")]),e._v(" "),v("li",[v("code",[e._v("Vue.mixin({config})")]),e._v(" 混入对象")])]),e._v(" "),v("h2",{attrs:{id:"数据"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据"}},[e._v("#")]),e._v(" 数据")]),e._v(" "),v("ol",[v("li",[v("code",[e._v("computed")]),e._v(" 计算属性的结果会被缓存,依赖的"),v("strong",[e._v("响应式属性")]),e._v("变化才会重新计算")]),e._v(" "),v("li",[v("code",[e._v("watch")]),e._v(" 键是需要观察的表达式,值是回调函数")]),e._v(" "),v("li",[v("code",[e._v("el")]),e._v(" &　"),v("code",[e._v("vm.$mount()")]),e._v(" 提供一个"),v("strong",[e._v("已存在")]),e._v("的 dom 作为 vue 实例的挂载目标")]),e._v(" "),v("li",[v("code",[e._v("provide/inject")]),e._v(" 定义父组件向子组件注入的依赖和子组件接收的依赖")])]),e._v(" "),v("h2",{attrs:{id:"生命周期钩子"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#生命周期钩子"}},[e._v("#")]),e._v(" 生命周期钩子")]),e._v(" "),v("ol",[v("li",[v("code",[e._v("beforeCreate")]),e._v(" 实例初始化后,数据观测 (data observer) 和 event/watcher 事件配置之前被调用")]),e._v(" "),v("li",[v("code",[e._v("created")]),e._v(" 实例创建完成后,此时已完成数据观测,属性和方法的运算,事件回调,此时还未挂载,$el 为空")]),e._v(" "),v("li",[v("code",[e._v("beforeMount")]),e._v(" 挂载之前, SSR 期间不被调用")]),e._v(" "),v("li",[v("code",[e._v("mounted")]),e._v(" 挂载完成后调用,此时已完成 vm.$el 的替换,但是此阶段不一定所有子元素都挂载完毕,使用 "),v("code",[e._v("vm.$nextTick")]),e._v(" 可等到所有视图渲染完毕,SSR 期间不被调用")]),e._v(" "),v("li",[v("code",[e._v("beforeUpdate")]),e._v(" 数据更新时调用,发生在虚拟 dom 打补丁之前,SSR 期间不被调用")]),e._v(" "),v("li",[v("code",[e._v("updated")]),e._v(" 数据更新之后, 此时 dom 已经更新(不包括子组件),用 "),v("code",[e._v("vm.$nextTick")]),e._v(" 等到整个视图重绘完毕, SSR 期间不被调用")]),e._v(" "),v("li",[v("code",[e._v("activated")]),e._v(" keep-alive 缓存的组件被激活时调用, SSR 期间不被调用")]),e._v(" "),v("li",[v("code",[e._v("deactivated")]),e._v(" keep-alive 缓存的组件停用时调用,SSR 期间不被调用")]),e._v(" "),v("li",[v("code",[e._v("beforeDestroy")]),e._v(" 实例销毁前,此时实例仍可使用,SSR 期间不被调用")]),e._v(" "),v("li",[v("code",[e._v("destroyed")]),e._v(" 实例销毁后,此时所有的子实例都被销毁,SSR 期间不被调用")]),e._v(" "),v("li",[v("code",[e._v("errorCaptured")]),e._v(" 捕获到来自子孙组件的错误时被调用,函数收到三个参数:错误对象,组件 vue 实例,包含错误来源信息的字符串,返回 false 以阻止该错误继续向上传播")])]),e._v(" "),v("h2",{attrs:{id:"实例属性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#实例属性"}},[e._v("#")]),e._v(" 实例属性")]),e._v(" "),v("ol",[v("li",[v("code",[e._v("vm.$props")]),e._v(" 当前组件接收到的 props 对象")]),e._v(" "),v("li",[v("code",[e._v("vm.$options")]),e._v(" 展示当前实例上的选项,可用来读取自定义属性")])]),e._v(" "),v("div",{staticClass:"language-js extra-class"},[v("pre",{pre:!0,attrs:{class:"language-js"}},[v("code",[v("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("new")]),e._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Vue")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),v("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("myName")]),v("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[e._v('"twgdh"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),v("span",{pre:!0,attrs:{class:"token function"}},[e._v("created")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    console"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[e._v("log")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),v("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("this")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("$options"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("myName"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n  "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),v("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 'twgdh'")]),e._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),v("ol",{attrs:{start:"3"}},[v("li",[v("code",[e._v("vm.$root")]),e._v(" 当前组件的根实例, 没有父实例时返回自己")]),e._v(" "),v("li",[v("code",[e._v("vm.$parent")]),e._v(" 当前组件的父实例")]),e._v(" "),v("li",[v("code",[e._v("vm.$chldren")]),e._v(" 当前实例的"),v("strong",[e._v("直接")]),e._v("子组件,不保证顺序,也不是响应式的")]),e._v(" "),v("li",[v("code",[e._v("vm.$slots")]),e._v(" 访问插槽")]),e._v(" "),v("li",[v("code",[e._v("vm.$scopedSlots")]),e._v(" 访问作用域插槽")]),e._v(" "),v("li",[v("code",[e._v("vm.$refs")]),e._v(" 访问注册过 ref 属性的所有 dom 元素和组件实例")])]),e._v(" "),v("h2",{attrs:{id:"实例方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#实例方法"}},[e._v("#")]),e._v(" 实例方法")]),e._v(" "),v("ol",[v("li",[v("code",[e._v("vm.$watch(expOrFn,cb,{option})")]),e._v(" 相当于扩展 watch 监听器, 该方法返回一个函数,执行后停止监听该属性")]),e._v(" "),v("li",[v("code",[e._v("vm.$set()")]),e._v(" 全局 Vue.set 方法的别名")]),e._v(" "),v("li",[v("code",[e._v("vm.$delete()")]),e._v(" 全局 Vue.delete 方法的别名")]),e._v(" "),v("li",[v("code",[e._v("vm.$on()")]),e._v(" 监听实例上的自定义事件,可由子组件通过 vm.$emit 触发")]),e._v(" "),v("li",[v("code",[e._v("$once()")]),e._v(" 监听事件,触发一次后移除")]),e._v(" "),v("li",[v("code",[e._v("vm.$off()")]),e._v(" 移除事件监听, 无参时移除所有,只提供事件名则移除该事件的所有监听器,如果同时提供事件与回调则只移除这个回调")]),e._v(" "),v("li",[v("code",[e._v("vm.$emit")]),e._v(" 触发当前实例上的事件,附加参数都会传给对应事件的回调函数")]),e._v(" "),v("li",[v("code",[e._v("vm.$forceUpdate()")]),e._v(" 强制重绘组件, 仅影响实例本身和插入插槽内容的子组件,而不是所有子组件")]),e._v(" "),v("li",[v("code",[e._v("vm.$nextTick()")]),e._v(" 与全局 Vue.nextTick 一样,this 自动绑定到调用它的实例上")]),e._v(" "),v("li",[v("code",[e._v("vm.$destroy()")]),e._v(" 完全销毁一个实例, 会触发 "),v("code",[e._v("beforeDestroy")]),e._v(" 和 "),v("code",[e._v("destroyed")]),e._v(" 的钩子")])]),e._v(" "),v("h2",{attrs:{id:"指令"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#指令"}},[e._v("#")]),e._v(" 指令")]),e._v(" "),v("ol",[v("li",[v("code",[e._v("v-pre")]),e._v(" 跳过这个元素的编译过程,显示原本的内容,跳过大量没有指令的节点会加快编译")]),e._v(" "),v("li",[v("code",[e._v("v-cloak")]),e._v(" 与 style 属性配合用来隐藏未编译完全的模板")]),e._v(" "),v("li",[v("code",[e._v("v-once")]),e._v(" 只渲染元素和组件一次, 之后的重新渲染会跳过此内容,可用于性能优化")])]),e._v(" "),v("h2",{attrs:{id:"特性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#特性"}},[e._v("#")]),e._v(" 特性")]),e._v(" "),v("ol",[v("li",[v("code",[e._v("key")]),e._v(" key 用于对比新旧 dom,不用 key 时 vue 会最大限度的复用元素,vue 会移除 key 不存在的元素,可利用该特性刷新组件")]),e._v(" "),v("li",[v("code",[e._v("is")]),e._v(" 用于动态组件")])])])}),[],!1,null,null,null);t.default=a.exports}}]);