(window.webpackJsonp=window.webpackJsonp||[]).push([[186],{841:function(t,s,a){"use strict";a.r(s);var e=a(12),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"正则语法速查表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则语法速查表"}},[t._v("#")]),t._v(" 正则语法速查表")]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/%E6%AD%A3%E5%88%99%E8%AF%AD%E6%B3%95%E9%80%9F%E6%9F%A5%E8%A1%A8.png",alt:"正则语法速查表"}})]),t._v(" "),a("h2",{attrs:{id:"正则表达式中的特殊字符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式中的特殊字符"}},[t._v("#")]),t._v(" 正则表达式中的特殊字符")]),t._v(" "),a("h3",{attrs:{id:"断言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#断言"}},[t._v("#")]),t._v(" 断言")]),t._v(" "),a("p",[t._v("表示一个匹配在某些条件下发生。断言包含先行断言、后行断言和条件表达式。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("^")]),t._v(" "),a("p",[t._v('匹配输入的开头。如果多行模式设为 true，^ 在换行符后也能立即匹配，比如 /^A/ 匹配不了 "an A" 里面的 "A"，但是可以匹配 "An A" 里面第一个 "A"。')]),t._v(" "),a("p",[t._v("注意与 "),a("code",[t._v("[^xyz]")]),t._v(" 的区别。")])]),t._v(" "),a("li",[a("p",[t._v("$")]),t._v(" "),a("p",[t._v('匹配输入的结束。如果多行模式设为 true，^ 在换行符前也能立即匹配，比如 /t$/ 不能匹配 "eater" 中的 "t"，但是可以匹配 "eat" 中的 "t"。')])]),t._v(" "),a("li",[a("p",[t._v("\\b")]),t._v(" "),a("p",[t._v("匹配一个单词的边界，这是一个字的字符前后没有另一个字的字符位置, 例如在字母和空格之间。需要注意的是匹配的单词边界不包括在匹配中。换句话说，匹配字边界的长度为零。")]),t._v(" "),a("ul",[a("li",[t._v('/\\bm/ 在 "moon" 中匹配到 "m"。')]),t._v(" "),a("li",[t._v('/oo\\b/ 在 "moon" 中不会匹配到 "oo", 因为 "oo" 后面跟着 "n" 这个单词字符。')]),t._v(" "),a("li",[t._v('/oon\\b/ 在 "moon" 中匹配 "oon"， 因为 "oon" 是这个字符串的结尾, 因此后面没有单词字符。')]),t._v(" "),a("li",[t._v("/\\w\\b\\w/ 将永远不会匹配任何东西，因为一个单词字符后面永远不会有非单词字符和单词字符。")])]),t._v(" "),a("p",[t._v("注意与 "),a("code",[t._v("[\\b]")]),t._v(" 的区别")])]),t._v(" "),a("li",[a("p",[t._v("\\B")]),t._v(" "),a("p",[t._v("匹配非单词边界，这是上一个字符和下一个字符属于同一类型的位置：要么两者都必须是单词，要么两者都必须是非单词。")])]),t._v(" "),a("li",[a("p",[t._v("x(?=y)")]),t._v(" "),a("p",[t._v("向前断言，x 后紧随 y 时匹配 x，匹配结果不包括 y。")])]),t._v(" "),a("li",[a("p",[t._v("x(?!y)")]),t._v(" "),a("p",[t._v("向前否定断言，x 后没有紧随 y 时匹配 x，匹配结果不包括 y。")])]),t._v(" "),a("li",[a("p",[t._v("(?<=y)x")]),t._v(" "),a("p",[t._v("向后断言，x 紧随 y 时匹配 x，匹配结果不包括 y。")])]),t._v(" "),a("li",[a("p",[t._v("(?<!y)x")]),t._v(" "),a("p",[t._v("向后否定断言，x 不紧随 y 时匹配 x，匹配结果不包括 y。")])])]),t._v(" "),a("h3",{attrs:{id:"字符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符"}},[t._v("#")]),t._v(" 字符")]),t._v(" "),a("p",[t._v("区分不同类型的字符，例如区分字母和数字。")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions/Character_Classes#%E7%B1%BB%E5%9E%8B",target:"_blank",rel:"noopener noreferrer"}},[t._v("字符类——MDN"),a("OutboundLink")],1)]),t._v(" "),a("ul",[a("li",[a("p",[t._v(".")]),t._v(" "),a("p",[t._v("匹配除行终止符之外的任何"),a("strong",[t._v("单个字符")]),t._v("，"),a("code",[t._v("/.y/")]),t._v(" 在 "),a("code",[t._v('"yes make my day"')]),t._v(" 中匹配的是 "),a("code",[t._v("my")]),t._v(" 和 "),a("code",[t._v("ay")]),t._v("，换成 "),a("code",[t._v("/..y/")]),t._v(" 匹配的则是 "),a("code",[t._v("my")]),t._v("（注意空格） 和 "),a("code",[t._v("day")])])]),t._v(" "),a("li",[a("p",[t._v("\\d & \\D")]),t._v(" "),a("p",[t._v("\\d 匹配数字，相当于 "),a("code",[t._v("[0-9]")]),t._v("。")]),t._v(" "),a("p",[t._v("\\D 匹配非数，相当于 "),a("code",[t._v("[^0-9]")]),t._v("。")])]),t._v(" "),a("li",[a("p",[t._v("\\w & \\W")]),t._v(" "),a("p",[t._v("\\w 匹配字符，包括下划线，相当于 "),a("code",[t._v("[A-Za-z0-9_]")])]),t._v(" "),a("p",[t._v("\\W 匹配非字符，相当于 "),a("code",[t._v("[^A-Za-z0-9_]")])])]),t._v(" "),a("li",[a("p",[t._v("\\s & \\S")]),t._v(" "),a("p",[t._v("\\s 匹配一个空白字符，包括空格、制表符、换行符和其他 Unicode 空格，相当于 "),a("code",[t._v("[ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]")])]),t._v(" "),a("p",[t._v("\\S 匹配非空白字符 "),a("code",[t._v("[^ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]")])])]),t._v(" "),a("li",[a("p",[t._v("其他字符\n\\t 匹配水平制表符（tab）\n\\r 匹配回车\n\\n 匹配换行\n\\v 匹配"),a("a",{attrs:{href:"https://bbs.csdn.net/topics/370081355",target:"_blank",rel:"noopener noreferrer"}},[t._v("垂直制表符"),a("OutboundLink")],1),t._v("\n\\f 匹配分页符\n[\\b] 匹配退格，注意与断言类 \\b 的区别\n\\0 匹配 "),a("a",{attrs:{href:"https://www.iiiff.com/article/318363",target:"_blank",rel:"noopener noreferrer"}},[t._v("Null Character（空字符）"),a("OutboundLink")],1),t._v("，后不能跟数字，在 js 中未找到匹配该规则的字符串\n\\xhh 匹配编码 hh(两个十六进制数字)的字符。\n\\uhhhh 用值 hhhh(4 个十六进制数字)匹配 UTF-16 编码。")])])]),t._v(" "),a("h3",{attrs:{id:"组和范围"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组和范围"}},[t._v("#")]),t._v(" 组和范围")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("x | y")]),t._v(" "),a("p",[t._v("匹配 x 或 y 。")])]),t._v(" "),a("li",[a("p",[t._v("[xyz][a-c]")]),t._v(" "),a("p",[t._v("匹配任何包含的字符。可以使用连字符来指定字符范围，但如果连字符是方括号的第一个或最后一个字符，则它将被作为普通字符包含在字符集中的文字连字符。")]),t._v(" "),a("p",[t._v("例如, "),a("code",[t._v("[abcd]")]),t._v(" 与"),a("code",[t._v("[a-d]")]),t._v(" 是一样的，"),a("code",[t._v("[-abcd]")]),t._v(" 会匹配 "),a("code",[t._v("non-profit")]),t._v(" 中的 "),a("code",[t._v("-")]),t._v("。")])]),t._v(" "),a("li",[a("p",[t._v("[^xyz] [^z-c]")]),t._v(" "),a("p",[t._v("匹配任何没有包含在括号中的字符。")])]),t._v(" "),a("li",[a("p",[t._v("(x)")]),t._v(" "),a("p",[t._v("捕获组，匹配 x 并记住匹配项。")]),t._v(" "),a("p",[t._v("正则表达式可以有多个捕获组，捕获组的顺序是正则中左括号的顺序。")]),t._v(" "),a("p",[t._v("括号并不会影响其他规则，如："),a("code",[t._v("/[abc]/")]),t._v("和 "),a("code",[t._v("/[a(b)c]/")]),t._v(" 都可以匹配 字符串中的 "),a("code",[t._v("a、b、c")]),t._v("，区别在于使用了括号后可以通过 "),a("code",[t._v("\\n")]),t._v(" 来引用捕获组中的内容。")])]),t._v(" "),a("li",[a("p",[t._v("\\n")]),t._v(" "),a("p",[t._v("引用第 n 个捕获组的内容，使用形式为 \\1、\\2，表示引用第一个、第二个捕获组匹配的内容。序号从 0 开始，注意 \\0 是另外的正则语法。")]),t._v(" "),a("p",[t._v("注意与字符类 \\n 的区别。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("(?<Name>x)")])]),t._v(" "),a("p",[t._v('具名捕获组，匹配"x"并将其存储在返回的匹配项的 groups 属性中，'),a("code",[t._v("'web-doc'.match(/-(?<customName>\\w)/).groups //{customName: \"d\"}")])])]),t._v(" "),a("li",[a("p",[t._v("(?:x)")]),t._v(" "),a("p",[t._v("非捕获组，匹配 x 但是不记录在捕获组中，即无法用 \\n 引用也不记录在捕获组对象的 groups 中。适用于有多个捕获组时忽略掉一些捕获组以更好的使用 \\n 的情况，js 中的正则有具名捕获组的概念，所以这个语法只能限制 \\n 的使用？")])])]),t._v(" "),a("h3",{attrs:{id:"量词"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#量词"}},[t._v("#")]),t._v(" 量词")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("x*")]),t._v(" "),a("p",[t._v("将前面的项 x 匹配 0 次或多次。")])]),t._v(" "),a("li",[a("p",[t._v("x +")]),t._v(" "),a("p",[t._v("将前面的项 x 匹配 1 次或多次，等价于 {1,}（见下文）。")])]),t._v(" "),a("li",[a("p",[t._v("x?")]),t._v(" "),a("p",[t._v("将前面的项 x 匹配 0 或 1 次。")]),t._v(" "),a("p",[t._v("注意在量词（包括自己，也就是可以有 x?? 这样的用法）后使用时的含义变化（非贪婪匹配）。")])]),t._v(" "),a("li",[a("p",[t._v("x{n}")]),t._v(" "),a("p",[t._v("将前面的项 x 匹配 n 次，n 为整数。")])]),t._v(" "),a("li",[a("p",[t._v("x{n,}")]),t._v(" "),a("p",[t._v("将前面的项 x 匹配至少 n 次。")])]),t._v(" "),a("li",[a("p",[t._v("x{n,m}")]),t._v(" "),a("p",[t._v("将前面的项匹配 [n,m] 次")])])]),t._v(" "),a("h4",{attrs:{id:"量词的贪婪匹配与非贪婪匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#量词的贪婪匹配与非贪婪匹配"}},[t._v("#")]),t._v(" 量词的贪婪匹配与非贪婪匹配")]),t._v(" "),a("p",[t._v("量词默认情况下是贪婪匹配，如果在任何量词*、+、?或{}之后使用?，则使量词进行非贪婪匹配。")]),t._v(" "),a("p",[t._v("贪婪匹配：匹配尽可能多的字符串。\n非贪婪匹配：一旦找到匹配对象就立即停止。")]),t._v(" "),a("p",[t._v("如："),a("code",[t._v('\'aaaaaaaaaaaa\'.match(/a{2,5}/g); // ["aaaaa", "aaaaa", "aa"]')]),t._v("，使用非贪婪匹配后则是："),a("code",[t._v('\'aaaaaaaaaaaa\'.match(/a{2,5}?/g); // ["aa", "aa", "aa", "aa", "aa", "aa"]')])]),t._v(" "),a("h3",{attrs:{id:"unicode-属性转义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unicode-属性转义"}},[t._v("#")]),t._v(" Unicode 属性转义")]),t._v(" "),a("p",[t._v("使用 Unicode 属性可以匹配表情、标点符号、字母(甚至适用特定语言或文字)等。")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions",target:"_blank",rel:"noopener noreferrer"}},[t._v("Unicode 属性转义——MDN"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"正则表达式标志"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式标志"}},[t._v("#")]),t._v(" 正则表达式标志")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("标志")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("g")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("全局搜索。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("i")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("不区分大小写搜索。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("m")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("多行搜索。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("s")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("允许 "),a("code",[t._v(".")]),t._v(" 匹配换行符。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("u")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("使用 unicode 码的模式进行匹配。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("y")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("执行“粘性("),a("code",[t._v("sticky")]),t._v(")”搜索,匹配从目标字符串的当前位置开始。")])])])]),t._v(" "),a("h2",{attrs:{id:"使用正则表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用正则表达式"}},[t._v("#")]),t._v(" 使用正则表达式")]),t._v(" "),a("p",[t._v("如果只是为了判断是否匹配（true 或 false），可以使用 RegExp.test() 或者 String.search() 方法。")]),t._v(" "),a("p",[t._v("如果想获取所有匹配项可以用 String.match() 方法，注意要添加全局标志（g）。")]),t._v(" "),a("p",[t._v("如果想查看每次匹配的详情可以用 RegExp.exec() 方法（注意全局标志的影响），可以通过"),a("RouterLink",{attrs:{to:"/_posts/technology/JavaScript/编程基础\\WebAPI\\ECMAScript\\对象\\RegExp.html#捕获组"}},[t._v("捕获组")]),t._v("的 index 和每次调用后的 RegExp.lastIndex 可以确定这次匹配的开始和结束位置。")],1),t._v(" "),a("p",[t._v("如果想获取所有匹配项的"),a("RouterLink",{attrs:{to:"/_posts/technology/JavaScript/编程基础\\WebAPI\\ECMAScript\\对象\\RegExp.html#捕获组"}},[t._v("捕获组")]),t._v("可以用 String.matchAll() 方法，注意要添加全局标志（g）。无法监控 RegExp.lastIndex 的状态。")],1),t._v(" "),a("h3",{attrs:{id:"regexp-prototype-exec-str"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#regexp-prototype-exec-str"}},[t._v("#")]),t._v(" RegExp.prototype.exec(str)")]),t._v(" "),a("p",[t._v("使用全局标志：字符串中有匹配项时返回这条匹配信息的"),a("RouterLink",{attrs:{to:"/_posts/technology/JavaScript/编程基础\\WebAPI\\ECMAScript\\对象\\RegExp.html#捕获组"}},[t._v("捕获组")]),t._v("，同时更新 RegExp.lastIndex 属性；不匹配不匹配时返回 null，同时 RegExp.lastIndex 属性设置为 0。")],1),t._v(" "),a("p",[t._v("不使用全局标志：返回第一个匹配项的"),a("RouterLink",{attrs:{to:"/_posts/technology/JavaScript/编程基础\\WebAPI\\ECMAScript\\对象\\RegExp.html#捕获组"}},[t._v("捕获组")]),t._v("或 null。")],1),t._v(" "),a("p",[t._v("如果要获得所有匹配的"),a("RouterLink",{attrs:{to:"/_posts/technology/JavaScript/编程基础\\WebAPI\\ECMAScript\\对象\\RegExp.html#捕获组"}},[t._v("捕获组")]),t._v("可以使用 String.prototype.matchAll(reg) 方法。")],1),t._v(" "),a("p",[t._v("通过"),a("RouterLink",{attrs:{to:"/_posts/technology/JavaScript/编程基础\\WebAPI\\ECMAScript\\对象\\RegExp.html#捕获组"}},[t._v("捕获组")]),t._v("的 index 和每次调用后的 RegExp.lastIndex 可以确定这次匹配的开始和结束位置。")],1),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"我今年25岁明年26岁后年27岁千年24岁"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\d+")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\d+")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用global或sticky标志在下次调用exec时会从上一次匹配位置（lastIndex）之后进行匹配")]),t._v("\nreg1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["25", index: 3, input: "我今年25岁明年26岁后年27岁千年24岁", groups: undefined]')]),t._v("\nreg1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["26", index: 8, input: "我今年25岁明年26岁后年27岁千年24岁", groups: undefined]')]),t._v("\nreg1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["27", index: 13, input: "我今年25岁明年26岁后年27岁千年24岁", groups: undefined]')]),t._v("\nreg1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["25", index: 3, input: "我今年25岁明年26岁后年27岁千年24岁", groups: undefined]')]),t._v("\nreg1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// null")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 没有使用global或sticky标志则不会记录状态")]),t._v("\nreg2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["25", index: 3, input: "我今年25岁明年26岁后年27岁千年24岁", groups: undefined]')]),t._v("\nreg2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["25", index: 3, input: "我今年25岁明年26岁后年27岁千年24岁", groups: undefined]')]),t._v("\n")])])]),a("p",[t._v("注意，即使再次查找的字符串不是原查找字符串时，lastIndex 也不会被重置，它依旧会从记录的 lastIndex 开始。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"我今年25岁明年26岁后年27岁千年24岁"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"我今年25岁明年26岁后年27岁千年24岁"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\d+")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nreg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["25", index: 3, input: "我今年25岁明年26岁后年27岁千年24岁", groups: undefined]')]),t._v("\nreg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 5")]),t._v("\nreg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["26", index: 8, input: "我今年25岁明年26岁后年27岁千年24岁", groups: undefined]')]),t._v("\nreg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 10")]),t._v("\nreg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["27", index: 13, input: "我今年25岁明年26岁后年27岁千年24岁", groups: undefined]')]),t._v("\nreg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 15")]),t._v("\nreg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["25", index: 3, input: "我今年25岁明年26岁后年27岁千年24岁", groups: undefined]')]),t._v("\nreg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 20")]),t._v("\nreg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// null")]),t._v("\nreg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n")])])]),a("p",[t._v("匹配成功后更新 lastIndex 属性，匹配失败时将 lastIndex 重置为 0。")]),t._v(" "),a("h3",{attrs:{id:"regexp-prototype-test-str"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#regexp-prototype-test-str"}},[t._v("#")]),t._v(" RegExp.prototype.test(str)")]),t._v(" "),a("p",[t._v("查看正则表达式与指定的字符串是否匹配，返回 true 或 false。")]),t._v(" "),a("p",[t._v("类似于 String.prototype.search() 方法，差别在于 test 返回一个布尔值，而 search 返回索引（如果找到）或者-1（如果没找到）。")]),t._v(" "),a("p",[t._v("如果正则表达式设置了全局标志，test() 的执行会改变正则表达式 lastIndex 属性。连续的执行 test()方法，后续的执行将会从 lastIndex 处开始匹配字符串。")]),t._v(" "),a("p",[t._v("同 exec 一样，匹配成功后更新 lastIndex 属性，匹配失败时将 lastIndex 重置为 0。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"我今年25岁明年26"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\d+")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\d+")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用global或sticky标志在下次调用test时会从上一次匹配位置（lastIndex）之后进行匹配")]),t._v("\nreg1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nreg1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nreg1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 没有使用global或sticky标志则不会记录状态")]),t._v("\nreg1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nreg1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nreg1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("h3",{attrs:{id:"string-prototype-match-reg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-match-reg"}},[t._v("#")]),t._v(" String.prototype.match(reg)")]),t._v(" "),a("p",[t._v("如果使用全局标志，则返回与正则表达式匹配的所有结果的数组。")]),t._v(" "),a("p",[t._v("如果未使用全局标志，则仅返回第一个完整匹配及其相关的"),a("RouterLink",{attrs:{to:"/_posts/technology/JavaScript/编程基础\\WebAPI\\ECMAScript\\对象\\RegExp.html#捕获组"}},[t._v("捕获组")]),t._v("（Array），其返回值与不带全局标志的 reg.exec() 的返回值相同。")],1),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"我今年25岁明年26岁后年27岁千年24岁"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\d+")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\d+")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用全局标志则返回所有匹配项")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["25", "26", "27", "24"]')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 没有全局标志返回第一个匹配项的[捕获组](编程基础\\WebAPI\\ECMAScript\\对象\\RegExp.md#捕获组)，不会修改lastIndex属性")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["25", index: 3, input: "我今年25岁明年26岁后年27岁千年24岁", groups: undefined]')]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["25", index: 3, input: "我今年25岁明年26岁后年27岁千年24岁", groups: undefined]')]),t._v("\n")])])]),a("h3",{attrs:{id:"string-prototype-matchall-reg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-matchall-reg"}},[t._v("#")]),t._v(" String.prototype.matchAll(reg)")]),t._v(" "),a("p",[t._v("返回匹配"),a("RouterLink",{attrs:{to:"/_posts/technology/JavaScript/编程基础\\WebAPI\\ECMAScript\\对象\\RegExp.html#捕获组"}},[t._v("捕获组")]),t._v("的迭代器，这里的正则必须带全局标志，否则会报错。")],1),t._v(" "),a("p",[t._v("这里的返回结果与依次调用 RegExp.exec() 方法得到的结果一致。")]),t._v(" "),a("p",[t._v("使用 matchAll 方法无法监控 RegExp.lastIndex 的变化。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"我今年25岁明年26岁后年27岁千年24岁"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\d+")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("matchAll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//     ["25", index: 3, input: "我今年25岁明年26岁后年27岁千年24岁", groups: undefined]')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//     ["26", index: 8, input: "我今年25岁明年26岁后年27岁千年24岁", groups: undefined]')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//     ["27", index: 13, input: "我今年25岁明年26岁后年27岁千年24岁", groups: undefined]')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//     ["24", index: 18, input: "我今年25岁明年26岁后年27岁千年24岁", groups: undefined]')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ]")]),t._v("\n")])])]),a("h3",{attrs:{id:"string-prototype-search-reg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-search-reg"}},[t._v("#")]),t._v(" String.prototype.search(reg)")]),t._v(" "),a("p",[t._v("返回正则表达式在字符串中首次匹配项的索引；无匹配则返回 -1。全局标志对此方法无影响。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"我今年25岁明年26"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\d+")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\d+")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 全局标志对结果无影响")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("search")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("search")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3")]),t._v("\n")])])]),a("h3",{attrs:{id:"string-prototype-replace-regexp-substr-newsubstr-function"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-replace-regexp-substr-newsubstr-function"}},[t._v("#")]),t._v(" String.prototype.replace(regexp|substr, newSubStr|function)")]),t._v(" "),a("h4",{attrs:{id:"特殊变量名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特殊变量名"}},[t._v("#")]),t._v(" 特殊变量名")]),t._v(" "),a("p",[t._v("二参为字符串时可设置以下特殊字符串")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("变量名")]),t._v(" "),a("th",[t._v("代表的值")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("$$")]),t._v(" "),a("td",[t._v('插入一个 "$"。')])]),t._v(" "),a("tr",[a("td",[t._v("$&`")]),t._v(" "),a("td",[t._v("插入匹配的子串。")])]),t._v(" "),a("tr",[a("td",[t._v("$`")]),t._v(" "),a("td",[t._v("插入当前匹配的子串左边的内容。")])]),t._v(" "),a("tr",[a("td",[t._v("$'")]),t._v(" "),a("td",[t._v("插入当前匹配的子串右边的内容。")])]),t._v(" "),a("tr",[a("td",[t._v("$"),a("em",[t._v("n")])]),t._v(" "),a("td",[t._v("假如第一个参数是 RegExp 对象，并且 n 是个小于 100 的非负整数，那么插入第 n 个括号匹配的字符串。提示：索引是从 1 开始。如果不存在第 n 个分组，那么将会把匹配到到内容替换为字面量。比如不存在第 3 个分组，就会用“$3”替换匹配到的内容。")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("$<Name>")])]),t._v(" "),a("td",[t._v("这里 `Name 是一个分组名称。如果在正则表达式中并不存在分组（或者没有匹配），这个变量将被处理为空字符串。只有在支持命名分组捕获的浏览器中才能使用。")])])])]),t._v(" "),a("h4",{attrs:{id:"指定函数作为参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指定函数作为参数"}},[t._v("#")]),t._v(" 指定函数作为参数")]),t._v(" "),a("p",[t._v("二参为函数时接收以下参数")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("变量名")]),t._v(" "),a("th",[t._v("代表的值")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("match")])]),t._v(" "),a("td",[t._v("匹配的子串。")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("p1,p2, ...")])]),t._v(" "),a("td",[t._v("假如 replace()方法的第一个参数是一个 RegExp 对象，则代表第 n 个括号匹配的字符串。（对应于上述的$1，$2 等。）例如，如果是用 "),a("code",[t._v("/(\\a+)(\\b+)/")]),t._v(" 这个来匹配，"),a("code",[t._v("p1")]),t._v(" 就是匹配的 "),a("code",[t._v("\\a+")]),t._v("，"),a("code",[t._v("p2")]),t._v(" 就是匹配的 "),a("code",[t._v("\\b+")]),t._v("。")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("offset")])]),t._v(" "),a("td",[t._v("匹配到的子字符串在原字符串中的偏移量，也就是索引。（比如，如果原字符串是 "),a("code",[t._v("'abcd'")]),t._v("，匹配到的子字符串是 "),a("code",[t._v("'bc'")]),t._v("，那么这个参数将会是 1）")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("string")])]),t._v(" "),a("td",[t._v("被匹配的原字符串。")])]),t._v(" "),a("tr",[a("td",[t._v("NamedCaptureGroup")]),t._v(" "),a("td",[t._v("命名"),a("RouterLink",{attrs:{to:"/_posts/technology/JavaScript/编程基础\\WebAPI\\ECMAScript\\对象\\RegExp.html#捕获组"}},[t._v("捕获组")]),t._v("匹配的对象")],1)])])]),t._v(" "),a("h3",{attrs:{id:"string-prototype-split-regexp-substr-limit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-split-regexp-substr-limit"}},[t._v("#")]),t._v(" String.prototype.split(regexp|substr, limit?)")]),t._v(" "),a("p",[t._v("分隔字符串，二参为限定分隔的次数。")]),t._v(" "),a("h2",{attrs:{id:"其他概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他概念"}},[t._v("#")]),t._v(" 其他概念")]),t._v(" "),a("h3",{attrs:{id:"regexp-lastindex"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#regexp-lastindex"}},[t._v("#")]),t._v(" RegExp.lastIndex")]),t._v(" "),a("p",[t._v("lastIndex 是正则表达式的一个可读可写的整型属性，用来指定下一次匹配的起始索引。")]),t._v(" "),a("p",[t._v("lastIndex 表示上次成功匹配的最后位置。")]),t._v(" "),a("p",[t._v("会修改 reg.lastIndex 属性（设置全局标志）的 API 包括：RegExp.exec()、RegExp.test()。")]),t._v(" "),a("h3",{attrs:{id:"捕获组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#捕获组"}},[t._v("#")]),t._v(" 捕获组")]),t._v(" "),a("p",[t._v("一个捕获组的数据格式为："),a("code",[t._v('["25", index: 3, input: "我今年25岁明年26岁后年27岁千年24岁", groups: undefined]')])]),t._v(" "),a("p",[t._v("在设置了 global 或 sticky 标志位的情况下（如 /foo/g or /foo/y），JavaScript RegExp 对象是有状态的。他们会将上次成功匹配后的位置记录在 lastIndex 属性（当前 RegExp 表达式的属性，即 reg.lastIndex）中。")]),t._v(" "),a("ul",[a("li",[t._v("前面的字符串表示匹配的字符串和捕获组匹配的字符串")]),t._v(" "),a("li",[t._v("index: 匹配的结果的开始位置。")]),t._v(" "),a("li",[t._v("input: 完整字符串。")]),t._v(" "),a("li",[t._v("groups: 一个具名捕获组数组，没有则为 null。")])]),t._v(" "),a("h3",{attrs:{id:"规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#规则"}},[t._v("#")]),t._v(" 规则")]),t._v(" "),a("p",[t._v('只有正则表达式使用了表示全局检索的 "g" 标志时，该属性才会起作用。此时应用下面的规则：')]),t._v(" "),a("ul",[a("li",[t._v("如果 lastIndex 大于字符串的长度，则 regexp.test 和 regexp.exec 将会匹配失败，然后 lastIndex 被设置为 0。")]),t._v(" "),a("li",[t._v("如果 lastIndex 等于字符串的长度，且该正则表达式匹配空字符串，则该正则表达式匹配从 lastIndex 开始的字符串。")]),t._v(" "),a("li",[t._v("如果 lastIndex 等于字符串的长度，且该正则表达式不匹配空字符串 ，则该正则表达式不匹配字符串，lastIndex 被设置为 0.。")]),t._v(" "),a("li",[t._v("否则，lastIndex 被设置为紧随最近一次成功匹配的下一个位置。")])]),t._v(" "),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions",target:"_blank",rel:"noopener noreferrer"}},[t._v("正则表达式"),a("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=n.exports}}]);