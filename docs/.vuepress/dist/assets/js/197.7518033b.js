(window.webpackJsonp=window.webpackJsonp||[]).push([[197],{847:function(a,e,s){"use strict";s.r(e);var t=s(12),r=Object(t.a)({},(function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("p",[a._v("以往一个域名对应一个服务器，在流量很大时对服务器造成很大的负担，会导致响应缓慢甚至出现响应错误，负载均衡就是将流量分散到多个服务器上，减轻对单一服务器的压力。")]),a._v(" "),s("h2",{attrs:{id:"nginx-使用负载均衡"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nginx-使用负载均衡"}},[a._v("#")]),a._v(" nginx 使用负载均衡")]),a._v(" "),s("p",[a._v("将 HTTP 流量代理到一组服务器。")]),a._v(" "),s("ol",[s("li",[a._v("在 http 上下文中用 "),s("code",[a._v("upstream")]),a._v(" 定义一组服务器")]),a._v(" "),s("li",[a._v("在 server 上下文中用 "),s("code",[a._v("proxy_pass")]),a._v(" 将请求代理到这组服务器上")])]),a._v(" "),s("div",{staticClass:"language-conf extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("http {\n\n    upstream backend {\n        server 192.168.8.74:8000;\n        server 192.168.8.74:8003;\n    }\n\n    server {\n        listen       8888;\n        server_name  localhost;\n        location / {\n          proxy_pass http://backend;\n        }\n    }\n}\n")])])]),s("h2",{attrs:{id:"负载均衡方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#负载均衡方法"}},[a._v("#")]),a._v(" 负载均衡方法")]),a._v(" "),s("p",[a._v("NGINX 开源支持四种负载均衡方法，NGINX Plus 增加了两种方法。")]),a._v(" "),s("h3",{attrs:{id:"循环-默认"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#循环-默认"}},[a._v("#")]),a._v(" 循环（默认）")]),a._v(" "),s("p",[a._v("请求在服务器之间均匀分布，并考虑服务器权重。")]),a._v(" "),s("h3",{attrs:{id:"最少连接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最少连接"}},[a._v("#")]),a._v(" 最少连接")]),a._v(" "),s("p",[a._v("请求被发送到活动连接数最少的服务器，并考虑服务器权重。")]),a._v(" "),s("div",{staticClass:"language-conf extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("upstream backend {\n    least_conn;\n    server backend1.example.com;\n    server backend2.example.com;\n}\n")])])]),s("h3",{attrs:{id:"ip-hash"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ip-hash"}},[a._v("#")]),a._v(" IP Hash")]),a._v(" "),s("p",[a._v("请求发送到的服务器由客户端 IP 地址确定。")]),a._v(" "),s("p",[a._v("在这种情况下，要么使用 IPv4 地址的前三个八位字节，要么使用整个 IPv6 地址来计算哈希值。")]),a._v(" "),s("p",[a._v("该方法保证来自同一地址的请求到达同一服务器，除非它不可用。")]),a._v(" "),s("div",{staticClass:"language-conf extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("upstream backend {\n    ip_hash;\n    server backend1.example.com;\n    server backend2.example.com;\n}\n")])])]),s("p",[a._v("如果其中一台服务器需要暂时从负载平衡轮换中移除，则可以使用 down 参数对其进行标记，以保留客户端 IP 地址的当前散列。由该服务器处理的请求会自动发送到组中的下一个服务器：")]),a._v(" "),s("div",{staticClass:"language-conf extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("upstream backend {\n    server backend1.example.com;\n    server backend2.example.com;\n    server backend3.example.com down;\n}\n")])])]),s("h3",{attrs:{id:"通用-hash"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#通用-hash"}},[a._v("#")]),a._v(" 通用 Hash")]),a._v(" "),s("p",[a._v("请求发送到的服务器由用户定义的键确定，该键可以是文本字符串、变量或组合。例如，密钥可以是成对的源 IP 地址和端口，或 URI，如本例所示：")]),a._v(" "),s("div",{staticClass:"language-conf extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("upstream backend {\n    hash $request_uri consistent;\n    server backend1.example.com;\n    server backend2.example.com;\n}\n")])])]),s("p",[a._v("该指令的可选 consistent 参数 hash 启用 ketama 一致性哈希负载平衡。")]),a._v(" "),s("p",[a._v("请求根据用户定义的散列键值均匀分布在所有上游服务器上。")]),a._v(" "),s("p",[a._v("如果将上游服务器添加到上游组或从上游组中删除，则仅重新映射少数键，从而在负载平衡缓存服务器或其他累积状态的应用程序的情况下最大限度地减少缓存未命中。")]),a._v(" "),s("h3",{attrs:{id:"最少时间-plus"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最少时间-plus"}},[a._v("#")]),a._v(" 最少时间 - PLUS")]),a._v(" "),s("p",[a._v("对于每个请求，NGINX PLUS 选择具有最低平均延迟和最低数量的活动连接。")]),a._v(" "),s("div",{staticClass:"language-conf extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("upstream backend {\n    least_time header;\n    server backend1.example.com;\n    server backend2.example.com;\n}\n")])])]),s("h4",{attrs:{id:"可选参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可选参数"}},[a._v("#")]),a._v(" 可选参数")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("header – 从服务器接收第一个字节的时间")])]),a._v(" "),s("li",[s("p",[a._v("last_byte – 从服务器接收完整响应的时间")])]),a._v(" "),s("li",[s("p",[a._v("last_byte inflight – 从服务器接收完整响应的时间，考虑到不完整的请求")])])]),a._v(" "),s("h3",{attrs:{id:"随机-plus"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#随机-plus"}},[a._v("#")]),a._v(" 随机 - PLUS")]),a._v(" "),s("p",[a._v("每个请求都将传递到随机选择的服务器。")]),a._v(" "),s("p",[s("strong",[a._v("随机负载平衡方法应被用于在多个负载平衡器传递请求到相同组的后端分布式环境。")])]),a._v(" "),s("div",{staticClass:"language-conf extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("upstream backend {\n    random two least_time=last_byte;\n    server backend1.example.com;\n    server backend2.example.com;\n    server backend3.example.com;\n    server backend4.example.com;\n}\n")])])]),s("h2",{attrs:{id:"服务器权重"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#服务器权重"}},[a._v("#")]),a._v(" 服务器权重")]),a._v(" "),s("p",[a._v("使用 "),s("code",[a._v("weight")]),a._v(" 参数设置服务器权重。")]),a._v(" "),s("p",[a._v("https://docs.nginx.com/nginx/admin-guide/load-balancer/http-load-balancer/")]),a._v(" "),s("h2",{attrs:{id:"参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[a._v("#")]),a._v(" 参考")]),a._v(" "),s("p",[s("a",{attrs:{href:"https://docs.nginx.com/nginx/admin-guide/load-balancer/http-load-balancer/",target:"_blank",rel:"noopener noreferrer"}},[a._v("HTTP Load Balancing"),s("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=r.exports}}]);