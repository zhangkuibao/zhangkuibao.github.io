(window.webpackJsonp=window.webpackJsonp||[]).push([[216],{866:function(t,a,s){"use strict";s.r(a);var e=s(12),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("在 "),s("code",[t._v("unix")]),t._v(" 中，我们可以使用管道符号 "),s("code",[t._v("|")]),t._v(" 来实现流，在 "),s("code",[t._v("node")]),t._v(" 中则是 "),s("code",[t._v("stream")]),t._v(" 模块。")]),t._v(" "),s("p",[t._v("在 "),s("code",[t._v("node")]),t._v(" 中，流可以帮助我们将事情的重点分为几份，因为使用流可以帮助我们将实现接口的部分分割成一些连续的接口，这些接口都是可重用的。接着，你可以将一个流的输出口接到另一个流的输入口，然后使用使用一些库来对流实现高级别的控制。")]),t._v(" "),s("h2",{attrs:{id:"object-mode-对象模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-mode-对象模式"}},[t._v("#")]),t._v(" object mode （对象模式）")]),t._v(" "),s("p",[s("code",[t._v("Node.js API")]),t._v(" 创建的所有流都只对字符串和 "),s("code",[t._v("Buffer")]),t._v("（或 "),s("code",[t._v("Uint8Array")]),t._v("）对象进行操作。 但是，流的实现可以使用其他类型的 "),s("code",[t._v("JavaScript")]),t._v(" 值（除了 "),s("code",[t._v("null")]),t._v("，它在流中具有特殊用途）。 这样的流被认为是在"),s("strong",[t._v("对象模式")]),t._v("下运行的。")]),t._v(" "),s("p",[t._v("流的实例在创建流时使用 "),s("code",[t._v("objectMode")]),t._v(" 选项切换到对象模式。 尝试将现有的流切换到对象模式是不安全的。")]),t._v(" "),s("h2",{attrs:{id:"缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缓存"}},[t._v("#")]),t._v(" 缓存")]),t._v(" "),s("p",[s("code",[t._v("Writable")]),t._v(" 和 "),s("code",[t._v("Readable")]),t._v(" 流都将数据存储在内部缓存区中。")]),t._v(" "),s("p",[t._v("调用 "),s("code",[t._v("stream.push(chunk)")]),t._v(" 时，数据缓存在 "),s("code",[t._v("Readable")]),t._v(" 流中。 如果流的消费者没有调用 "),s("code",[t._v("stream.read()")]),t._v("，则数据会一直驻留在内部队列中，直到被消费。")]),t._v(" "),s("p",[s("code",[t._v("stream API")]),t._v(" 的一个关键目标，是将数据缓存限制在可接受的水平，以便不同速度的来源和目标不会压倒可用内存。")]),t._v(" "),s("p",[s("code",[t._v("Duplex")]),t._v(" 和 "),s("code",[t._v("Transform")]),t._v(" 流都是 "),s("code",[t._v("Readable")]),t._v(" 和 "),s("code",[t._v("Writable")]),t._v("，因此每个流都维护两个独立的内部缓存区，用于读取和写入。")]),t._v(" "),s("p",[t._v("可以使用 "),s("code",[t._v("writable.writableBuffer")]),t._v(" 或 "),s("code",[t._v("readable.readableBuffer")]),t._v(" 检索内部的缓存区。")]),t._v(" "),s("h3",{attrs:{id:"highwatermark-最大缓存阈值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#highwatermark-最大缓存阈值"}},[t._v("#")]),t._v(" highWaterMark 最大缓存阈值")]),t._v(" "),s("p",[t._v("可能缓存的数据量取决于传给流的构造函数的 "),s("code",[t._v("highWaterMark")]),t._v(" 选项。")]),t._v(" "),s("p",[t._v("对于普通的流，"),s("code",[t._v("highWaterMark")]),t._v(" 选项指定字节的总数。 对于在对象模式下操作的流，"),s("code",[t._v("highWaterMark")]),t._v(" 指定对象的总数。")]),t._v(" "),s("p",[t._v("一旦内部读取缓存区的总大小达到 "),s("code",[t._v("highWaterMark")]),t._v(" 指定的阈值，流将停止调用内部的用于填充读取缓存区 "),s("code",[t._v("readable._read()")]),t._v(" 方法。")]),t._v(" "),s("p",[s("code",[t._v("highWaterMark")]),t._v(" 选项是阈值，而不是限制：它规定了流在停止请求更多数据之前缓存的数据量。 它通常不强制执行严格的内存限制。 特定的流实现可能会选择实施更严格的限制，但这样做是可选的。")]),t._v(" "),s("h2",{attrs:{id:"writable-可写流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#writable-可写流"}},[t._v("#")]),t._v(" Writable 可写流")]),t._v(" "),s("p",[t._v("可写流是数据写入目标的抽象。")]),t._v(" "),s("p",[t._v("如下代码就创建了一个可写流，所有写入 "),s("code",[t._v("write")]),t._v(" 的数据都会被保存到 "),s("code",[t._v("file.txt.gz")]),t._v(" 文件中。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" write "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createWriteStream")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"file.txt.gz"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"drain-事件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#drain-事件"}},[t._v("#")]),t._v(" "),s("code",[t._v("drain")]),t._v(" 事件")]),t._v(" "),s("p",[t._v("如果对 "),s("code",[t._v("stream.write(chunk)")]),t._v(" 的调用返回 "),s("code",[t._v("false")]),t._v("，则 "),s("code",[t._v("drain")]),t._v(" 事件将在可以继续将数据写入流时触发。")]),t._v(" "),s("h3",{attrs:{id:"writable-write-chunk-encoding-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#writable-write-chunk-encoding-callback"}},[t._v("#")]),t._v(" writable.write(chunk[, encoding][, callback])")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("chunk "),s("code",[t._v("<string> | <Buffer> | <Uint8Array> | <any>")]),t._v(" 可选的要写入的数据。")]),t._v(" "),s("p",[t._v("对于不在对象模式下操作的流，chunk 必须是字符串、Buffer 或 Uint8Array。 对于对象模式的流，chunk 可以是除 null 之外的任何 JavaScript 值。")])]),t._v(" "),s("li",[s("p",[t._v("encoding "),s("code",[t._v("<string>")]),t._v(" chunk 为字符串时的编码。")])]),t._v(" "),s("li",[s("p",[t._v("callback "),s("code",[t._v("<Function>")]),t._v(" 当刷新此数据块时的回调。")])]),t._v(" "),s("li",[s("p",[t._v("返回: "),s("code",[t._v("<boolean>")]),t._v(" 如果流希望调用代码在继续写入其他数据之前等待 'drain' 事件被触发，则为 "),s("code",[t._v("false")]),t._v("；否则为 "),s("code",[t._v("true")]),t._v("。")])])]),t._v(" "),s("p",[s("code",[t._v("writable.write()")]),t._v(" 方法将一些数据写入流，并在数据完全处理后调用提供的 "),s("code",[t._v("callback")]),t._v("。")]),t._v(" "),s("p",[t._v("如果在接纳 "),s("code",[t._v("chunk")]),t._v(" 后，内部缓存区小于 "),s("code",[t._v("highWaterMark")]),t._v(" 阈值，则返回值为 "),s("code",[t._v("true")]),t._v("。")]),t._v(" "),s("p",[t._v("当流没有排空时，对 "),s("code",[t._v("write()")]),t._v(" 的调用将缓存 "),s("code",[t._v("chunk")]),t._v("，并返回 "),s("code",[t._v("false")]),t._v("。此时仍然可以进行写入操作，但是由于 "),s("code",[t._v("node")]),t._v(" 会缓存所有写入的数据块，可能导致高内存占用，如果缓存一直没有被读取则内存一直无法被释放。当缓存达到最大内存使用量时它将无条件终止。")]),t._v(" "),s("p",[t._v("推荐的操作是当 "),s("code",[t._v("write()")]),t._v(" 返回 "),s("code",[t._v("false")]),t._v(" 时等待 "),s("code",[t._v("drain")]),t._v(" 事件触发后再进行写入：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cb")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("stream"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    stream"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("once")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"drain"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    process"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("nextTick")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在执行任何其他写入之前等待回调被调用。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Write completed, do more writes now."')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"world"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"writable-end-chunk-encoding-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#writable-end-chunk-encoding-callback"}},[t._v("#")]),t._v(" writable.end([chunk[, encoding]][, callback])")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("chunk "),s("code",[t._v("<string> | <Buffer> | <Uint8Array> | <any>")]),t._v(" 可选的要写入的数据。")]),t._v(" "),s("p",[t._v("对于不在对象模式下操作的流，chunk 必须是字符串、Buffer 或 Uint8Array。 对于对象模式的流，chunk 可以是除 null 之外的任何 JavaScript 值。")])]),t._v(" "),s("li",[s("p",[t._v("encoding "),s("code",[t._v("<string>")]),t._v(" chunk 为字符串时的编码。")])]),t._v(" "),s("li",[s("p",[t._v("callback "),s("code",[t._v("<Function>")]),t._v(" 流结束时的回调。")])])]),t._v(" "),s("p",[t._v("调用 "),s("code",[t._v("writable.end()")]),t._v(" 方法表示不再有数据写入 "),s("code",[t._v("Writable")]),t._v("。 可选的 "),s("code",[t._v("chunk")]),t._v(" 和 "),s("code",[t._v("encoding")]),t._v(" 参数允许在关闭流之前立即写入最后一个额外的数据块。")]),t._v(" "),s("h3",{attrs:{id:"writable-setdefaultencoding-encoding"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#writable-setdefaultencoding-encoding"}},[t._v("#")]),t._v(" writable.setDefaultEncoding(encoding)")]),t._v(" "),s("p",[t._v("为 "),s("code",[t._v("Writable")]),t._v(" 流设置默认的 "),s("code",[t._v("encoding")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"writable-writable"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#writable-writable"}},[t._v("#")]),t._v(" writable.writable")]),t._v(" "),s("p",[t._v("该值为 "),s("code",[t._v("true")]),t._v(" 表示流没有被销毁、出错或结束。")]),t._v(" "),s("h2",{attrs:{id:"readable-可读流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#readable-可读流"}},[t._v("#")]),t._v(" Readable 可读流")]),t._v(" "),s("p",[t._v("我们可以从一个可读流中读取数据。")]),t._v(" "),s("p",[t._v("如下代码创建了一个 "),s("code",[t._v("file.txt")]),t._v(" 文件的可写流，当 "),s("code",[t._v("read")]),t._v(" 被消费时可以读取到 "),s("code",[t._v("file.txt")]),t._v(" 的内容。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" read "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createReadStream")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"file.txt"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"readable-的读取模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#readable-的读取模式"}},[t._v("#")]),t._v(" Readable 的读取模式")]),t._v(" "),s("p",[s("code",[t._v("Readable")]),t._v(" 流有两种读取模式："),s("strong",[t._v("流动")]),t._v("和"),s("strong",[t._v("暂停")]),t._v("。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("在流动模式下，数据会自动从底层系统读取，并通过 "),s("code",[t._v("EventEmitter")]),t._v(" 接口使用事件尽快提供给应用程序。")])]),t._v(" "),s("li",[s("p",[t._v("在暂停模式下，必须显式调用 "),s("code",[t._v("stream.read()")]),t._v(" 方法以从流中读取数据块。")])])]),t._v(" "),s("p",[t._v("所有的 "),s("code",[t._v("Readable")]),t._v(" 流都以暂停模式开始，但可以通过以下方式之一切换到流动模式：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("添加 "),s("code",[t._v("data")]),t._v(" 事件句柄（监听 "),s("code",[t._v("data")]),t._v(" 事件）。")])]),t._v(" "),s("li",[s("p",[t._v("调用 "),s("code",[t._v("stream.resume()")]),t._v(" 方法。")])]),t._v(" "),s("li",[s("p",[t._v("调用 "),s("code",[t._v("stream.pipe()")]),t._v(" 方法将数据发送到 "),s("code",[t._v("Writable")]),t._v("。")])])]),t._v(" "),s("p",[s("code",[t._v("Readable")]),t._v(" 可以使用以下方法之一切换回暂停模式：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("如果没有管道目标，则通过调用 "),s("code",[t._v("stream.pause()")]),t._v(" 方法。")])]),t._v(" "),s("li",[s("p",[t._v("如果有管道目标，则删除所有管道目标。 可以通过调用 "),s("code",[t._v("stream.unpipe()")]),t._v(" 方法删除多个管道目标。")])])]),t._v(" "),s("p",[t._v("在提供消费或忽略该数据的机制之前，"),s("code",[t._v("Readable")]),t._v(" 不会产生数据。")]),t._v(" "),s("p",[t._v("如果 "),s("code",[t._v("Readable")]),t._v(" 处于流动模式并且数据没有被消费时，数据将会丢失。")]),t._v(" "),s("h3",{attrs:{id:"readable-的三种状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#readable-的三种状态"}},[t._v("#")]),t._v(" Readable 的三种状态")]),t._v(" "),s("p",[t._v("在任何给定的时间点，每个 "),s("code",[t._v("Readable")]),t._v(" 都处于三种可能的状态之一：")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("readable.readableFlowing === null")]),t._v(" 没有消费者，不产生数据。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("readable.readableFlowing === false")]),t._v(" 处于暂停模式。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("readable.readableFlowing === true")]),t._v(" 处于流动模式。")])])]),t._v(" "),s("h3",{attrs:{id:"data-事件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#data-事件"}},[t._v("#")]),t._v(" "),s("code",[t._v("data")]),t._v(" 事件")]),t._v(" "),s("p",[t._v("每当流将数据块的所有权移交给消费者时，则会触发 "),s("code",[t._v("data")]),t._v(" 事件。 如：调用 "),s("code",[t._v("readable.pipe()")]),t._v("、"),s("code",[t._v("readable.resume()")]),t._v("、调用 "),s("code",[t._v("readable.read()")]),t._v(" 方法并且可以返回数据块时。")]),t._v(" "),s("p",[t._v("将 "),s("code",[t._v("data")]),t._v(" 事件监听器绑定到尚未"),s("strong",[t._v("显式暂停的流")]),t._v("，则会将流切换到流动模式。 数据将在可用时立即传入。")]),t._v(" "),s("p",[t._v("如果使用 "),s("code",[t._v("readable.setEncoding()")]),t._v(" 方法为流指定了默认编码，则监听器回调将把数据块作为字符串传入；否则数据将作为 "),s("code",[t._v("Buffer")]),t._v(" 传入。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" readable "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getReadableStreamSomehow")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nreadable"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"data"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("chunk")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("Received ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("chunk"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v(" bytes of data.")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"end-事件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#end-事件"}},[t._v("#")]),t._v(" "),s("code",[t._v("end")]),t._v(" 事件")]),t._v(" "),s("p",[t._v("当流中的数据被消费完时触发。")]),t._v(" "),s("h3",{attrs:{id:"readable-pause"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#readable-pause"}},[t._v("#")]),t._v(" readable.pause()")]),t._v(" "),s("p",[t._v("退出流动模式，停止触发 "),s("code",[t._v("data")]),t._v(" 事件。")]),t._v(" "),s("p",[t._v("此后任何可用的数据都将保留在内部缓存区中。")]),t._v(" "),s("p",[t._v("如果有 "),s("code",[t._v("readable")]),t._v(" 事件监听器，则 "),s("code",[t._v("readable.pause()")]),t._v(" 方法不起作用。")]),t._v(" "),s("h3",{attrs:{id:"readable-resume"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#readable-resume"}},[t._v("#")]),t._v(" readable.resume()")]),t._v(" "),s("p",[t._v("将流切换到流动模式，恢复触发 "),s("code",[t._v("data")]),t._v(" 事件。")]),t._v(" "),s("p",[s("code",[t._v("readable.resume()")]),t._v(" 方法可用于完全地消费流中的数据，而无需实际处理任何数据：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getReadableStreamSomehow")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("resume")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"end"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Reached the end, but did not read anything."')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("如果有 "),s("code",[t._v("readable")]),t._v(" 事件监听器，则 "),s("code",[t._v("readable.resume()")]),t._v(" 方法不起作用。")]),t._v(" "),s("h3",{attrs:{id:"readable-pipe-destination-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#readable-pipe-destination-options"}},[t._v("#")]),t._v(" readable.pipe(destination[, options])")]),t._v(" "),s("ul",[s("li",[t._v("destination "),s("code",[t._v("<stream.Writable>")]),t._v(" 写入数据的目标。")]),t._v(" "),s("li",[t._v("options "),s("code",[t._v("<Object>")]),t._v(" 管道选项。\n"),s("ul",[s("li",[t._v("end "),s("code",[t._v("<boolean>")]),t._v(" 当读取结束时结束写入。 默认值: true。")])])]),t._v(" "),s("li",[t._v("返回: "),s("code",[t._v("<stream.Writable>")]),t._v(" 目标，如果它是 Duplex 或 Transform 流，则允许使用管道链。")])]),t._v(" "),s("p",[s("code",[t._v("readable.pipe()")]),t._v(" 方法会将 "),s("code",[t._v("readable")]),t._v(" 切换到流动模式。")]),t._v(" "),s("p",[s("code",[t._v("readable.pipe()")]),t._v(" 接受一个"),s("strong",[t._v("可读的流")]),t._v("并将数据输出到一个"),s("strong",[t._v("可写的流")]),t._v("中。")]),t._v(" "),s("p",[s("strong",[t._v("如果 "),s("code",[t._v("Readable")]),t._v(" 流在处理过程中触发错误，此时 "),s("code",[t._v("Writable")]),t._v(" 目标不会自动关闭，需要手动关闭每个流以防止内存泄漏。")])]),t._v(" "),s("h3",{attrs:{id:"readable-unpipe-destination"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#readable-unpipe-destination"}},[t._v("#")]),t._v(" readable.unpipe([destination])")]),t._v(" "),s("ul",[s("li",[t._v("destination "),s("code",[t._v("<stream.Writable>")]),t._v(" 取消指定流。")])]),t._v(" "),s("p",[s("code",[t._v("readable.unpipe()")]),t._v(" 方法分离先前使用 "),s("code",[t._v("stream.pipe()")]),t._v(" 方法绑定的 "),s("code",[t._v("Writable")]),t._v(" 流。")]),t._v(" "),s("h3",{attrs:{id:"readable-read-size"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#readable-read-size"}},[t._v("#")]),t._v(" readable.read([size])")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("size "),s("code",[t._v("<number>")]),t._v(" 指定要读取的数据量，对象模式下无效（固定返回一个条目），必须小于或等于 "),s("code",[t._v("1 GiB")]),t._v("，未指定时返回内部缓存区中的所有数据。")])]),t._v(" "),s("li",[s("p",[t._v("返回: "),s("code",[t._v("<string> | <Buffer> | <null> | <any>")]),t._v("。")])])]),t._v(" "),s("p",[s("code",[t._v("readable.read()")]),t._v(" 方法从"),s("strong",[t._v("内部缓存区")]),t._v("中取出一些数据并返回，有数据时返回数据并触发 "),s("code",[t._v("data")]),t._v(" 事件；缓存中没有可读数据时返回 "),s("code",[t._v("null")]),t._v("，读完所有数据后触发 "),s("code",[t._v("end")]),t._v(" 事件。")]),t._v(" "),s("p",[s("code",[t._v("readable.read()")]),t._v(" 方法应该只在处于暂停模式的 "),s("code",[t._v("Readable")]),t._v(" 流上调用。 在流动模式下，会自动调用 "),s("code",[t._v("readable.read()")]),t._v("，直到内部缓存区完全排空。")]),t._v(" "),s("p",[s("code",[t._v("readable.read()")]),t._v(" 返回的数据块不是串联的，可能会出现已缓存的内容都已被消费但是还有更多数据尚未被缓存的情况。")]),t._v(" "),s("p",[t._v("因此，要从 "),s("code",[t._v("readable")]),t._v(" 读取文件的全部内容，必须跨越多个 "),s("code",[t._v("readable")]),t._v(" 事件来收集块：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" chunks "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nreadable"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"readable"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" chunk"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("chunk "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" readable"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    chunks"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("chunk"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nreadable"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"end"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" content "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" chunks"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"readable-push-chunk-encoding"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#readable-push-chunk-encoding"}},[t._v("#")]),t._v(" readable.push(chunk[, encoding])")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("chunk "),s("code",[t._v("<Buffer> | <Uint8Array> | <string> | <null> | <any>")]),t._v(" 要推入读取队列的数据块。")])]),t._v(" "),s("li",[s("p",[t._v("encoding "),s("code",[t._v("<string>")]),t._v(" 字符串块的编码。 必须是有效的 "),s("code",[t._v("Buffer")]),t._v(" 编码，例如 "),s("code",[t._v("utf8")]),t._v(" 或 "),s("code",[t._v("ascii")]),t._v("。")])]),t._v(" "),s("li",[s("p",[t._v("返回: "),s("code",[t._v("<boolean>")]),t._v(" 如果可以继续推送额外的数据块，则为 "),s("code",[t._v("true")]),t._v("；否则为 "),s("code",[t._v("false")]),t._v("。")])])]),t._v(" "),s("p",[s("code",[t._v("readable.push()")]),t._v(" 方法用于将内容推送到内部缓冲区中。 它可以由 "),s("code",[t._v("readable._read()")]),t._v(" 方法驱动。")]),t._v(" "),s("p",[s("code",[t._v("chunk")]),t._v(" 为 "),s("code",[t._v("null")]),t._v(" 时表示流结束 (EOF)，之后不能再写入数据。")]),t._v(" "),s("h3",{attrs:{id:"readable-readable"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#readable-readable"}},[t._v("#")]),t._v(" readable.readable")]),t._v(" "),s("p",[t._v("该值为 "),s("code",[t._v("true")]),t._v(" 表示流没有被销毁、出错或结束。")]),t._v(" "),s("h3",{attrs:{id:"readable-readableflowing"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#readable-readableflowing"}},[t._v("#")]),t._v(" readable.readableFlowing")]),t._v(" "),s("p",[t._v("如果流处于流模式，则返回 "),s("code",[t._v("true")]),t._v("，否则返回 "),s("code",[t._v("false")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"duplex-双工流-与-transform-转换流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#duplex-双工流-与-transform-转换流"}},[t._v("#")]),t._v(" Duplex（双工流）与 Transform（转换流）")]),t._v(" "),s("p",[t._v("双工流是同时实现 "),s("code",[t._v("Readable")]),t._v(" 和 "),s("code",[t._v("Writable")]),t._v(" 接口的流。")]),t._v(" "),s("p",[t._v("转换流是一种双工流。")]),t._v(" "),s("p",[t._v("双工流需要同时实现 "),s("code",[t._v("Readable")]),t._v(" 和 "),s("code",[t._v("Writable")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"为什么应该使用流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么应该使用流"}},[t._v("#")]),t._v(" 为什么应该使用流")]),t._v(" "),s("p",[t._v("在 "),s("code",[t._v("node")]),t._v(" 中，"),s("code",[t._v("I/O")]),t._v(" 都是异步的，所以在和硬盘以及网络的交互过程中会涉及到传递回调函数的过程。你之前可能会写出这样的代码：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" http "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" fs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fs"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" server "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" http"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createServer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("req"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" res")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFile")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__dirname "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/data.txt"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" data")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nserver"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("listen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("上面的这段代码并没有什么问题，但是在每次请求时，我们都会把整个 "),s("code",[t._v("data.txt")]),t._v(" 文件读入到内存中，然后再把结果返回给客户端，在响应大量用户的并发请求时，程序会消耗大量的内存，这样很可能会造成用户连接缓慢的问题。")]),t._v(" "),s("p",[t._v("其次，上面的代码可能会造成很不好的用户体验，因为用户在接收到任何的内容之前首先需要等待程序将文件内容完全读入到内存中。")]),t._v(" "),s("p",[t._v("所幸的是，(req,res)参数都是流对象，这意味着我们可以使用一种更好的方法来实现上面的需求：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" http "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" fs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fs"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" server "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" http"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createServer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("req"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" res")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" stream "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createReadStream")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__dirname "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/data.txt"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  stream"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pipe")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nserver"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("listen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("在这里，"),s("code",[t._v(".pipe()")]),t._v("方法会自动帮助我们监听 "),s("code",[t._v("data")]),t._v(" 和 "),s("code",[t._v("end")]),t._v(" 事件。上面的这段代码不仅简洁，而且 "),s("code",[t._v("data.txt")]),t._v(" 文件中每一小段数据都将源源不断的发送到客户端。")]),t._v(" "),s("h2",{attrs:{id:"参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),s("p",[s("a",{attrs:{href:"http://nodejs.cn/api/stream.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("stream"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/substack/stream-handbook",target:"_blank",rel:"noopener noreferrer"}},[t._v("stream-handbook"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/jabez128/stream-handbook",target:"_blank",rel:"noopener noreferrer"}},[t._v("stream-handbook 中文版"),s("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=n.exports}}]);