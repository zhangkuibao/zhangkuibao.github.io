(window.webpackJsonp=window.webpackJsonp||[]).push([[256],{906:function(v,_,t){"use strict";t.r(_);var a=t(12),s=Object(a.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h2",{attrs:{id:"摘要"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#摘要"}},[v._v("#")]),v._v(" 摘要")]),v._v(" "),t("ol",[t("li",[v._v("若采用顺序存储，则各个数据元素在物理上必须是连续的；若采用非顺序存储，则各个数据元素在物理上可以是离散的。")]),v._v(" "),t("li",[v._v("数据的存储结构会影响存储空间分配的方便程度和数据运算速度。")]),v._v(" "),t("li",[v._v("栈是一种抽象数据类型，只表示逻辑结构。")]),v._v(" "),t("li",[v._v("数据中包含若干个数据元素，数据元素中包含若干个数据项。")]),v._v(" "),t("li",[v._v("数据结构就是定义如何把现实世界的问题信息化（逻辑结构），如何将信息存进计算机（存储结构），同时还要实现对数据结构的基本操作（运算）。")]),v._v(" "),t("li",[v._v("算法的性能问题只有在问题规模足够大时才会暴露出来。")])]),v._v(" "),t("h2",{attrs:{id:"数据结构的三要素"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据结构的三要素"}},[v._v("#")]),v._v(" 数据结构的三要素")]),v._v(" "),t("h3",{attrs:{id:"数据的逻辑结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据的逻辑结构"}},[v._v("#")]),v._v(" 数据的逻辑结构")]),v._v(" "),t("p",[v._v("数据的逻辑结构是指数据元素之间逻辑上的关系。")]),v._v(" "),t("ul",[t("li",[v._v("集合")]),v._v(" "),t("li",[v._v("线性结构")]),v._v(" "),t("li",[v._v("树形结构")]),v._v(" "),t("li",[v._v("图状结构/网状结构")])]),v._v(" "),t("h3",{attrs:{id:"数据的存储结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据的存储结构"}},[v._v("#")]),v._v(" 数据的存储结构")]),v._v(" "),t("p",[v._v("数据的存储结构是指数据在计算机中的存储方式。包括数据元素的表示和关系的表示。")]),v._v(" "),t("ul",[t("li",[v._v("顺序存储")]),v._v(" "),t("li",[v._v("链式存储")]),v._v(" "),t("li",[v._v("索引存储")]),v._v(" "),t("li",[v._v("离散存储")])]),v._v(" "),t("h3",{attrs:{id:"数据的运算"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据的运算"}},[v._v("#")]),v._v(" 数据的运算")]),v._v(" "),t("p",[v._v("运算的定义是针对逻辑结构的，运算的实现是针对存储结构的。")]),v._v(" "),t("h4",{attrs:{id:"队列的运算"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#队列的运算"}},[v._v("#")]),v._v(" 队列的运算")]),v._v(" "),t("ul",[t("li",[v._v("队头元素出队")]),v._v(" "),t("li",[v._v("新元素入队")]),v._v(" "),t("li",[v._v("输出队列长度")])]),v._v(" "),t("h2",{attrs:{id:"算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#算法"}},[v._v("#")]),v._v(" 算法")]),v._v(" "),t("h3",{attrs:{id:"算法的特性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#算法的特性"}},[v._v("#")]),v._v(" 算法的特性")]),v._v(" "),t("ul",[t("li",[v._v("有穷性")]),v._v(" "),t("li",[v._v("确定性。同样的输入只能得出同样的输出。")]),v._v(" "),t("li",[v._v("可行性。算法的每一步都可实现。")]),v._v(" "),t("li",[v._v("输入")]),v._v(" "),t("li",[v._v("输出")])]),v._v(" "),t("h3",{attrs:{id:"好算法的特性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#好算法的特性"}},[v._v("#")]),v._v(" 好算法的特性")]),v._v(" "),t("ul",[t("li",[v._v("正确性")]),v._v(" "),t("li",[v._v("可读性。要"),t("strong",[v._v("无歧义")]),v._v("地描述出解决问题的步骤。")]),v._v(" "),t("li",[v._v("健壮性。能处理非法数据。")]),v._v(" "),t("li",[v._v("高效率与低存储量需求。降低算法执行时间，减少执行过程中所需的最大存储空间。这两者都与问题规模有关。")])]),v._v(" "),t("h3",{attrs:{id:"算法效率的度量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#算法效率的度量"}},[v._v("#")]),v._v(" 算法效率的度量")]),v._v(" "),t("p",[v._v("算法中所有语句的频度之和记作 "),t("code",[v._v("T(n)")]),v._v("。")]),v._v(" "),t("h4",{attrs:{id:"时间复杂度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度"}},[v._v("#")]),v._v(" 时间复杂度")]),v._v(" "),t("p",[v._v("时间复杂度分析时间开销与问题规模 "),t("code",[v._v("n")]),v._v(" 之间的关系。")]),v._v(" "),t("p",[v._v("时间复杂度主要分析 "),t("code",[v._v("T(n)")]),v._v(" 的"),t("strong",[v._v("数量级")]),v._v("。因此在评判一个算法的时间复杂度时可以只用最大数量级的频度来表示。")]),v._v(" "),t("p",[v._v("例如："),t("code",[v._v("f(n) = an^3 + bn^2 + cn")]),v._v(" 的时间复杂度为 "),t("code",[v._v("O(n^3)")]),v._v("。")]),v._v(" "),t("p",[v._v("计算算法复杂度的方法：")]),v._v(" "),t("ul",[t("li",[v._v("忽略顺序执行代码。")]),v._v(" "),t("li",[v._v("只挑循环中的一个基本操作分析它的执行次数与n的关系即可。")]),v._v(" "),t("li",[v._v("多层循环时只需关注最深层循环的频度。")])]),v._v(" "),t("h4",{attrs:{id:"空间复杂度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#空间复杂度"}},[v._v("#")]),v._v(" 空间复杂度")]),v._v(" "),t("p",[v._v("空间复杂度分析的是问题规模 "),t("code",[v._v("n")]),v._v(" 与所需额外存储空间之间的关系。")]),v._v(" "),t("p",[v._v("算法原地工作指算法所需要的辅助空间为常量（问题规模 "),t("code",[v._v("n")]),v._v(" 与所需辅助存储空间无关），即 "),t("code",[v._v("O(1)")]),v._v("。")]),v._v(" "),t("p",[v._v("递归算法的"),t("strong",[v._v("最小")]),v._v("空间复杂度等于递归调用的深度 "),t("code",[v._v("S(n) = O(n)")]),v._v("。")])])}),[],!1,null,null,null);_.default=s.exports}}]);