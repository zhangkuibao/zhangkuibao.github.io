(window.webpackJsonp=window.webpackJsonp||[]).push([[275],{925:function(t,e,r){"use strict";r.r(e);var n=r(12),a=Object(n.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/",target:"_blank",rel:"noopener noreferrer"}},[t._v("LeetCode 原题链接"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("路径 被定义为一条从树中任意节点出发，沿父节点-子节点连接，达到任意节点的序列。同一个节点在一条路径序列中 至多出现一次 。该路径 至少包含一个 节点，且不一定经过根节点。")]),t._v(" "),r("p",[t._v("路径和 是路径中各节点值的总和。")]),t._v(" "),r("p",[t._v("给你一个二叉树的根节点 root ，返回其 最大路径和 。")]),t._v(" "),r("h2",{attrs:{id:"动态规划解法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#动态规划解法"}},[t._v("#")]),t._v(" 动态规划解法")])])}),[],!1,null,null,null);e.default=a.exports}}]);