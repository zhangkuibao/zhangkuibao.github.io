(window.webpackJsonp=window.webpackJsonp||[]).push([[99],{749:function(t,v,a){"use strict";a.r(v);var _=a(12),s=Object(_.a)({},(function(){var t=this,v=t.$createElement,a=t._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("blockquote",[a("p",[t._v("为什么Git比其他版本控制系统设计得优秀，因为Git跟踪并管理的是修改，而非文件")])]),t._v(" "),a("h2",{attrs:{id:"git-工作流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-工作流程"}},[t._v("#")]),t._v(" git 工作流程")]),t._v(" "),a("p",[a("img",{attrs:{src:"src%5Cgit_flow.png",alt:"git工作流程图"}})]),t._v(" "),a("h3",{attrs:{id:"workspace-工作空间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#workspace-工作空间"}},[t._v("#")]),t._v(" workspace 工作空间")]),t._v(" "),a("ol",[a("li",[t._v("本地的、正在修改的内容，通常这里的文件状态是最新的")]),t._v(" "),a("li",[t._v("任何对象都是在工作空间中诞生和被修改")])]),t._v(" "),a("h4",{attrs:{id:"状态变化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#状态变化"}},[t._v("#")]),t._v(" 状态变化")]),t._v(" "),a("ol",[a("li",[t._v("通过 "),a("code",[t._v("git add")]),t._v(" 命令将新增、修改的文件添加到"),a("font",{attrs:{color:"red"}},[t._v("暂存区")])],1),t._v(" "),a("li",[t._v("通过 "),a("code",[t._v("git commit -a")]),t._v(" 命令将文件状态直接更新到"),a("font",{attrs:{color:"red"}},[t._v("本地仓库")])],1),t._v(" "),a("li",[t._v("通过 "),a("code",[t._v("git pull")]),t._v(" 命令从"),a("font",{attrs:{color:"red"}},[t._v("远程仓库")]),t._v("拉取远程仓库的"),a("font",{attrs:{color:"orange"}},[t._v("最后版本")])],1),t._v(" "),a("li",[t._v("通过 "),a("code",[t._v("git checkout")]),t._v(" 命令从"),a("font",{attrs:{color:"red"}},[t._v("暂存区")]),t._v("拉取检出文件（覆盖本地）")],1),t._v(" "),a("li",[t._v("通过 "),a("code",[t._v("git checkout <HEAD> | <commit id>")]),t._v(" 命令从"),a("font",{attrs:{color:"red"}},[t._v("本地仓库")]),t._v("的最新几次提交或指定的某次提交中检出文件（覆盖本地）")],1)]),t._v(" "),a("h3",{attrs:{id:"index-暂存区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#index-暂存区"}},[t._v("#")]),t._v(" index 暂存区")]),t._v(" "),a("ol",[a("li",[t._v("标记了当前的工作空间中哪些内容是被 "),a("code",[t._v("git")]),t._v(" 管理的")]),t._v(" "),a("li",[t._v("任何修改都是从进入index区才开始被 "),a("code",[t._v("git")]),t._v(" 版本控制")])]),t._v(" "),a("h4",{attrs:{id:"状态变化-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#状态变化-2"}},[t._v("#")]),t._v(" 状态变化")]),t._v(" "),a("ol",[a("li",[t._v("通过 "),a("code",[t._v("git commit")]),t._v(" 命令将本次修改版本提交到"),a("font",{attrs:{color:"red"}},[t._v("本地仓库")])],1)]),t._v(" "),a("h3",{attrs:{id:"本地仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#本地仓库"}},[t._v("#")]),t._v(" 本地仓库")]),t._v(" "),a("ol",[a("li",[t._v("保存提交过的各个版本")]),t._v(" "),a("li",[t._v("只有把修改提交到本地仓库，该修改才能在仓库中留下痕迹")])]),t._v(" "),a("h4",{attrs:{id:"状态变化-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#状态变化-3"}},[t._v("#")]),t._v(" 状态变化")]),t._v(" "),a("ol",[a("li",[t._v("通过 "),a("code",[t._v("git push")]),t._v(" 命令将本次修改版本推送到"),a("font",{attrs:{color:"red"}},[t._v("远程仓库")])],1),t._v(" "),a("li",[t._v("通过 "),a("code",[t._v("git fetch")]),t._v(" 命令从"),a("font",{attrs:{color:"red"}},[t._v("远程仓库")]),t._v("强制拉取代码覆盖本地")],1)]),t._v(" "),a("h3",{attrs:{id:"远程仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#远程仓库"}},[t._v("#")]),t._v(" 远程仓库")]),t._v(" "),a("ol",[a("li",[t._v("是本地仓库的异地备份，可以被其他协作者共享，这里的文件状态最旧")]),t._v(" "),a("li",[t._v("要与协作者分享本地的修改，可以把它们 "),a("code",[t._v("push")]),t._v(" 到远程仓库来共享")])]),t._v(" "),a("h2",{attrs:{id:"git-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-命令"}},[t._v("#")]),t._v(" git 命令")]),t._v(" "),a("h3",{attrs:{id:"配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[t._v("#")]),t._v(" 配置")]),t._v(" "),a("h4",{attrs:{id:"配置用户名和邮箱"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置用户名和邮箱"}},[t._v("#")]),t._v(" 配置用户名和邮箱")]),t._v(" "),a("ol",[a("li",[a("code",[t._v('git config --global user.name "username"')])]),t._v(" "),a("li",[a("code",[t._v("git config --global user.email useremail@qq.com")])])]),t._v(" "),a("h4",{attrs:{id:"查看用户名和邮箱"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看用户名和邮箱"}},[t._v("#")]),t._v(" 查看用户名和邮箱")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("git config --global user.name")])]),t._v(" "),a("li",[a("code",[t._v("git config --global user.email")])])]),t._v(" "),a("h4",{attrs:{id:"git-config-list-查看其他配置信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-config-list-查看其他配置信息"}},[t._v("#")]),t._v(" "),a("code",[t._v("git config --list")]),t._v(" 查看其他配置信息")]),t._v(" "),a("h3",{attrs:{id:"文件管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件管理"}},[t._v("#")]),t._v(" 文件管理")]),t._v(" "),a("h4",{attrs:{id:"git-add-将本地修改添加到暂存区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-add-将本地修改添加到暂存区"}},[t._v("#")]),t._v(" "),a("code",[t._v("git add")]),t._v(" 将本地修改添加到暂存区")]),t._v(" "),a("p",[t._v("把文件修改添加到暂存区，使用此命令后，未调用 "),a("code",[t._v("git commit")]),t._v(" 之前可以用 "),a("code",[t._v("git reset HEAD")]),t._v(" 回退到当期版本来清空暂存区")]),t._v(" "),a("h4",{attrs:{id:"git-commit-提交更改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-commit-提交更改"}},[t._v("#")]),t._v(" "),a("code",[t._v("git commit")]),t._v(" 提交更改")]),t._v(" "),a("p",[t._v("把暂存区的所有内容提交到当前分支，使用此命令后即生成一个新的版本号")]),t._v(" "),a("h4",{attrs:{id:"git-status-查看本地仓库的当前状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-status-查看本地仓库的当前状态"}},[t._v("#")]),t._v(" "),a("code",[t._v("git status")]),t._v(" 查看本地仓库的当前状态")]),t._v(" "),a("h4",{attrs:{id:"git-stash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-stash"}},[t._v("#")]),t._v(" "),a("code",[t._v("git stash")])]),t._v(" "),a("blockquote",[a("p",[t._v("保存当前工作区的修改")])]),t._v(" "),a("h5",{attrs:{id:"参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参数"}},[t._v("#")]),t._v(" 参数")]),t._v(" "),a("ol",[a("li",[a("p",[a("code",[t._v('git stash save "message"')]),t._v(" 执行存储时，添加备注，方便查找，只有 "),a("code",[t._v("git stash")]),t._v(" 也要可以的，但查找时不方便识别")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("git stash list")]),t._v(" 查看 "),a("code",[t._v("stash")]),t._v(" 了哪些存储")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("git stash show")]),t._v(" 显示做了哪些改动，默认show第一个存储,如果要显示其他存贮，后面加 "),a("code",[t._v("stash@{$num}")]),t._v("，比如第二个 "),a("code",[t._v("git stash show stash@{1}")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("git stash show -p")]),t._v(" 显示第一个存储的改动，如果想显示其他存存储，命令："),a("code",[t._v("git stash show stash@{$num} -p")]),t._v(" ，比如第二个："),a("code",[t._v("git stash show stash@{1} -p")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("git stash apply")]),t._v(" 应用某个存储,但不会把存储从存储列表中删除，默认使用第一个存储,即 "),a("code",[t._v("stash@{0}")]),t._v("，如果要使用其他个，"),a("code",[t._v("git stash apply stash@{$num}")]),t._v(" ， 比如第二个："),a("code",[t._v("git stash apply stash@{1}")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("git stash pop")]),t._v(" 命令恢复之前缓存的工作目录，将缓存堆栈中的对应stash删除，并将对应修改应用到当前的工作目录下,默认为第一个 "),a("code",[t._v("stash")]),t._v(",即 "),a("code",[t._v("stash@{0}")]),t._v("，如果要应用并删除其他 "),a("code",[t._v("stash")]),t._v("，命令："),a("code",[t._v("git stash pop stash@{$num}")]),t._v(" ，比如应用并删除第二个："),a("code",[t._v("git stash pop stash@{1}")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("git stash drop stash@{$num}")]),t._v(" 丢弃 "),a("code",[t._v("stash@{$num}")]),t._v(" 存储，从列表中删除这个存储")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("git stash clear")]),t._v(" 删除所有缓存的 "),a("code",[t._v("stash")])])])]),t._v(" "),a("h5",{attrs:{id:"注意"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注意"}},[t._v("#")]),t._v(" 注意")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("没有在 "),a("code",[t._v("git")]),t._v(" 版本控制中的文件，是不能被 "),a("code",[t._v("git stash")]),t._v(" 存起来的，新添加的文件无法被保存")])]),t._v(" "),a("li",[a("p",[t._v("只能保存工作区内的修改，对 "),a("code",[t._v("git add")]),t._v(" 命令添加到暂存区的文件无效")])])]),t._v(" "),a("h4",{attrs:{id:"git-diff-查看本地仓库具体修改内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-diff-查看本地仓库具体修改内容"}},[t._v("#")]),t._v(" "),a("code",[t._v("git diff")]),t._v(" 查看本地仓库具体修改内容")]),t._v(" "),a("h4",{attrs:{id:"git-log-显示提交日志"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-log-显示提交日志"}},[t._v("#")]),t._v(" "),a("code",[t._v("git log")]),t._v(" 显示提交日志")]),t._v(" "),a("p",[a("code",[t._v("commit id")]),t._v(" 是对应提交的版本号，"),a("code",[t._v("Git")]),t._v(" 是分布式版本控制系统，用类似 "),a("code",[t._v("svn")]),t._v(" 的数字版本号会引发冲突")]),t._v(" "),a("p",[a("code",[t._v("HEAD")]),t._v(" 表示当前版本")]),t._v(" "),a("h4",{attrs:{id:"git-reset-hard-head-回退版本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-reset-hard-head-回退版本"}},[t._v("#")]),t._v(" "),a("code",[t._v("git reset --hard HEAD^")]),t._v(" 回退版本")]),t._v(" "),a("p",[a("code",[t._v("HEAD")]),t._v(" 为回退到当前版本（清空暂存区），"),a("code",[t._v("HEAD^")]),t._v(" 指回退到上一个版本，"),a("code",[t._v("HEAD^^")]),t._v(" 代表回退两个版本，回退100个版本可写为 "),a("code",[t._v("HEAD~100")]),t._v("，"),a("code",[t._v("HEAD")]),t._v(" 可替换为目标版本的 "),a("code",[t._v("commit id")])]),t._v(" "),a("h5",{attrs:{id:"参数-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参数-2"}},[t._v("#")]),t._v(" 参数")]),t._v(" "),a("p",[a("code",[t._v("--hard")]),t._v(" 有了参数--hard,直接把工作区的内容也修改了，不加--hard的时候只是操作了暂存区（慎用）")]),t._v(" "),a("h4",{attrs:{id:"git-reflog-查看命令日志"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-reflog-查看命令日志"}},[t._v("#")]),t._v(" "),a("code",[t._v("git reflog")]),t._v(" 查看命令日志")]),t._v(" "),a("h4",{attrs:{id:"git-checkout"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-checkout"}},[t._v("#")]),t._v(" "),a("code",[t._v("git checkout --")])]),t._v(" "),a("p",[t._v("丢弃工作区的修改，让这个文件回到最近一次git commit或git add时的状态。注意：没有 "),a("code",[t._v("--")]),t._v("，就变成了“切换到另一个分支”的命令")]),t._v(" "),a("h4",{attrs:{id:"git-rm-删除版本库中的文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-rm-删除版本库中的文件"}},[t._v("#")]),t._v(" "),a("code",[t._v("git rm")]),t._v(" 删除版本库中的文件")]),t._v(" "),a("h3",{attrs:{id:"分支操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分支操作"}},[t._v("#")]),t._v(" 分支操作")]),t._v(" "),a("p",[t._v("查看当前分支："),a("code",[t._v("git branch")])]),t._v(" "),a("p",[t._v("创建分支："),a("code",[t._v("git branch <name>")])]),t._v(" "),a("p",[t._v("切换分支："),a("code",[t._v("git checkout <name>")]),t._v("或者"),a("code",[t._v("git switch <name>")])]),t._v(" "),a("p",[t._v("创建+切换分支："),a("code",[t._v("git checkout -b <name>")]),t._v(" 或者 "),a("code",[t._v("git switch -c <name>")])]),t._v(" "),a("p",[t._v("合并某分支到当前分支："),a("code",[t._v("git merge <name>")])]),t._v(" "),a("p",[t._v("删除分支："),a("code",[t._v("git branch -d <name>")])]),t._v(" "),a("h4",{attrs:{id:"合并分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#合并分支"}},[t._v("#")]),t._v(" 合并分支")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("git merge <name>")]),t._v(" 合并指定分支到当前分支，最终会生成一个新的 "),a("code",[t._v("commit")]),t._v("，在历史中展示为二叉树节点")]),t._v(" "),a("li",[a("code",[t._v("git rebase")]),t._v(" 变基，最终效果与 "),a("code",[t._v("merge")]),t._v(" 类似，区别在于不会生成新的 "),a("code",[t._v("commit")]),t._v(" ，"),a("code",[t._v("git rebase")]),t._v(" 提取操作有点像"),a("code",[t._v("git cherry-pick")]),t._v(" ，执行 "),a("code",[t._v("rebase")]),t._v(" 后依次将当前的提交 "),a("code",[t._v("cherry-pick")]),t._v(" 到目标分支上，然后将在原始分支上的已提交的 "),a("code",[t._v("commit")]),t._v(" 删除，在历史中展示为一条直线")])]),t._v(" "),a("h5",{attrs:{id:"mearge-和-rebase"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mearge-和-rebase"}},[t._v("#")]),t._v(" mearge 和 rebase")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("merge")]),t._v(" 能够体现出时间线，但是 "),a("code",[t._v("rebase")]),t._v(" 会打乱时间线")]),t._v(" "),a("li",[a("code",[t._v("rebase")]),t._v(" 看起来简洁，"),a("code",[t._v("merge")]),t._v(" 看起来较乱")]),t._v(" "),a("li",[t._v("最终结果是都把代码合起来了")])]),t._v(" "),a("h5",{attrs:{id:"注意-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注意-2"}},[t._v("#")]),t._v(" 注意")]),t._v(" "),a("ol",[a("li",[t._v("本地新建的分支如果不推送到远程，对其他人就是不可见的")])]),t._v(" "),a("h4",{attrs:{id:"get-cherry-pick-commit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-cherry-pick-commit"}},[t._v("#")]),t._v(" "),a("code",[t._v("get cherry-pick <commit>")])]),t._v(" "),a("blockquote",[a("p",[t._v("复制一个指定的提交到当前分支")])]),t._v(" "),a("h2",{attrs:{id:"自定义-git"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义-git"}},[t._v("#")]),t._v(" 自定义 git")]),t._v(" "),a("h3",{attrs:{id:"gitignore-文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gitignore-文件"}},[t._v("#")]),t._v(" "),a("code",[t._v(".gitignore")]),t._v(" 文件")]),t._v(" "),a("p",[t._v("部分规则如下")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 排除所有.开头的隐藏文件:\n.*\n# 排除所有.class文件:\n*.class\n\n# 不排除.gitignore和App.class:\n!.gitignore\n!App.class\n")])])])])}),[],!1,null,null,null);v.default=s.exports}}]);